
CURT 2020 EVMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cc0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001dcc  08001dcc  00011dcc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001df4  08001df4  00011df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001df8  08001df8  00011df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000128  2000000c  08001e08  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000134  08001e08  00020134  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f916  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000025ba  00000000  00000000  0002f94b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007d7a  00000000  00000000  00031f05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a88  00000000  00000000  00039c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000dc0  00000000  00000000  0003a708  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006469  00000000  00000000  0003b4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003bfb  00000000  00000000  00041931  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004552c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001f2c  00000000  00000000  000455a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001db4 	.word	0x08001db4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001db4 	.word	0x08001db4

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 fac8 	bl	80006f8 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 fa7c 	bl	8000674 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 fa55 	bl	8000650 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 fcae 	bl	8001b0c <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	2000002c 	.word	0x2000002c
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000002c 	.word	0x2000002c

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_ADC_ConvCpltCallback>:
 8000200:	4770      	bx	lr

08000202 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000202:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000204:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000206:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000208:	f012 0f50 	tst.w	r2, #80	; 0x50
 800020c:	d11b      	bne.n	8000246 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800020e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000214:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000216:	681a      	ldr	r2, [r3, #0]
 8000218:	6892      	ldr	r2, [r2, #8]
 800021a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800021e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000222:	d10c      	bne.n	800023e <ADC_DMAConvCplt+0x3c>
 8000224:	7b1a      	ldrb	r2, [r3, #12]
 8000226:	b952      	cbnz	r2, 800023e <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800022a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800022e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000232:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000234:	bf5e      	ittt	pl
 8000236:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8000238:	f042 0201 	orrpl.w	r2, r2, #1
 800023c:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800023e:	4618      	mov	r0, r3
 8000240:	f7ff ffde 	bl	8000200 <HAL_ADC_ConvCpltCallback>
 8000244:	bd10      	pop	{r4, pc}
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000246:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8000248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800024c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024e:	4718      	bx	r3

08000250 <HAL_ADC_ConvHalfCpltCallback>:
 8000250:	4770      	bx	lr

08000252 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000252:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000254:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000256:	f7ff fffb 	bl	8000250 <HAL_ADC_ConvHalfCpltCallback>
 800025a:	bd08      	pop	{r3, pc}

0800025c <HAL_ADC_ErrorCallback>:
{
 800025c:	4770      	bx	lr

0800025e <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800025e:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000260:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000262:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000268:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800026a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800026c:	f043 0304 	orr.w	r3, r3, #4
 8000270:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000272:	f7ff fff3 	bl	800025c <HAL_ADC_ErrorCallback>
 8000276:	bd08      	pop	{r3, pc}

08000278 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000278:	2300      	movs	r3, #0
{ 
 800027a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800027c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800027e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000282:	2b01      	cmp	r3, #1
 8000284:	d074      	beq.n	8000370 <HAL_ADC_ConfigChannel+0xf8>
 8000286:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8000288:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800028a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800028e:	2d06      	cmp	r5, #6
 8000290:	6802      	ldr	r2, [r0, #0]
 8000292:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000296:	680c      	ldr	r4, [r1, #0]
 8000298:	d825      	bhi.n	80002e6 <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800029a:	442b      	add	r3, r5
 800029c:	251f      	movs	r5, #31
 800029e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80002a0:	3b05      	subs	r3, #5
 80002a2:	409d      	lsls	r5, r3
 80002a4:	ea26 0505 	bic.w	r5, r6, r5
 80002a8:	fa04 f303 	lsl.w	r3, r4, r3
 80002ac:	432b      	orrs	r3, r5
 80002ae:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80002b0:	2c09      	cmp	r4, #9
 80002b2:	ea4f 0344 	mov.w	r3, r4, lsl #1
 80002b6:	688d      	ldr	r5, [r1, #8]
 80002b8:	d92f      	bls.n	800031a <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80002ba:	2607      	movs	r6, #7
 80002bc:	4423      	add	r3, r4
 80002be:	68d1      	ldr	r1, [r2, #12]
 80002c0:	3b1e      	subs	r3, #30
 80002c2:	409e      	lsls	r6, r3
 80002c4:	ea21 0106 	bic.w	r1, r1, r6
 80002c8:	fa05 f303 	lsl.w	r3, r5, r3
 80002cc:	430b      	orrs	r3, r1
 80002ce:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80002d0:	f1a4 0310 	sub.w	r3, r4, #16
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d92b      	bls.n	8000330 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80002d8:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 80002da:	2200      	movs	r2, #0
 80002dc:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 80002e0:	4618      	mov	r0, r3
 80002e2:	b002      	add	sp, #8
 80002e4:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80002e6:	2d0c      	cmp	r5, #12
 80002e8:	d80b      	bhi.n	8000302 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80002ea:	442b      	add	r3, r5
 80002ec:	251f      	movs	r5, #31
 80002ee:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80002f0:	3b23      	subs	r3, #35	; 0x23
 80002f2:	409d      	lsls	r5, r3
 80002f4:	ea26 0505 	bic.w	r5, r6, r5
 80002f8:	fa04 f303 	lsl.w	r3, r4, r3
 80002fc:	432b      	orrs	r3, r5
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000300:	e7d6      	b.n	80002b0 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000302:	442b      	add	r3, r5
 8000304:	251f      	movs	r5, #31
 8000306:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000308:	3b41      	subs	r3, #65	; 0x41
 800030a:	409d      	lsls	r5, r3
 800030c:	ea26 0505 	bic.w	r5, r6, r5
 8000310:	fa04 f303 	lsl.w	r3, r4, r3
 8000314:	432b      	orrs	r3, r5
 8000316:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000318:	e7ca      	b.n	80002b0 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800031a:	2607      	movs	r6, #7
 800031c:	6911      	ldr	r1, [r2, #16]
 800031e:	4423      	add	r3, r4
 8000320:	409e      	lsls	r6, r3
 8000322:	ea21 0106 	bic.w	r1, r1, r6
 8000326:	fa05 f303 	lsl.w	r3, r5, r3
 800032a:	430b      	orrs	r3, r1
 800032c:	6113      	str	r3, [r2, #16]
 800032e:	e7cf      	b.n	80002d0 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000330:	4b10      	ldr	r3, [pc, #64]	; (8000374 <HAL_ADC_ConfigChannel+0xfc>)
 8000332:	429a      	cmp	r2, r3
 8000334:	d116      	bne.n	8000364 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000336:	6893      	ldr	r3, [r2, #8]
 8000338:	021b      	lsls	r3, r3, #8
 800033a:	d4cd      	bmi.n	80002d8 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800033c:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800033e:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000340:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000344:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000346:	d1c7      	bne.n	80002d8 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000348:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <HAL_ADC_ConfigChannel+0x100>)
 800034a:	4a0c      	ldr	r2, [pc, #48]	; (800037c <HAL_ADC_ConfigChannel+0x104>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000352:	230a      	movs	r3, #10
 8000354:	4353      	muls	r3, r2
            wait_loop_index--;
 8000356:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000358:	9b01      	ldr	r3, [sp, #4]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d0bc      	beq.n	80002d8 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 800035e:	9b01      	ldr	r3, [sp, #4]
 8000360:	3b01      	subs	r3, #1
 8000362:	e7f8      	b.n	8000356 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000364:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000366:	f043 0320 	orr.w	r3, r3, #32
 800036a:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800036c:	2301      	movs	r3, #1
 800036e:	e7b4      	b.n	80002da <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000370:	2302      	movs	r3, #2
 8000372:	e7b5      	b.n	80002e0 <HAL_ADC_ConfigChannel+0x68>
 8000374:	40012400 	.word	0x40012400
 8000378:	20000008 	.word	0x20000008
 800037c:	000f4240 	.word	0x000f4240

08000380 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8000380:	2300      	movs	r3, #0
{
 8000382:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000384:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000386:	6803      	ldr	r3, [r0, #0]
{
 8000388:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800038a:	689a      	ldr	r2, [r3, #8]
 800038c:	07d2      	lsls	r2, r2, #31
 800038e:	d502      	bpl.n	8000396 <ADC_Enable+0x16>
  return HAL_OK;
 8000390:	2000      	movs	r0, #0
}
 8000392:	b002      	add	sp, #8
 8000394:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000396:	689a      	ldr	r2, [r3, #8]
 8000398:	f042 0201 	orr.w	r2, r2, #1
 800039c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800039e:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <ADC_Enable+0x68>)
 80003a0:	4a12      	ldr	r2, [pc, #72]	; (80003ec <ADC_Enable+0x6c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80003a8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80003aa:	9b01      	ldr	r3, [sp, #4]
 80003ac:	b9c3      	cbnz	r3, 80003e0 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 80003ae:	f7ff ff0f 	bl	80001d0 <HAL_GetTick>
 80003b2:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80003b4:	6823      	ldr	r3, [r4, #0]
 80003b6:	689d      	ldr	r5, [r3, #8]
 80003b8:	f015 0501 	ands.w	r5, r5, #1
 80003bc:	d1e8      	bne.n	8000390 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80003be:	f7ff ff07 	bl	80001d0 <HAL_GetTick>
 80003c2:	1b80      	subs	r0, r0, r6
 80003c4:	2802      	cmp	r0, #2
 80003c6:	d9f5      	bls.n	80003b4 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80003ca:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003ce:	f043 0310 	orr.w	r3, r3, #16
 80003d2:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 80003d6:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80003de:	e7d8      	b.n	8000392 <ADC_Enable+0x12>
      wait_loop_index--;
 80003e0:	9b01      	ldr	r3, [sp, #4]
 80003e2:	3b01      	subs	r3, #1
 80003e4:	e7e0      	b.n	80003a8 <ADC_Enable+0x28>
 80003e6:	bf00      	nop
 80003e8:	20000008 	.word	0x20000008
 80003ec:	000f4240 	.word	0x000f4240

080003f0 <HAL_ADC_Start_DMA>:
{
 80003f0:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 80003f4:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80003f6:	4b40      	ldr	r3, [pc, #256]	; (80004f8 <HAL_ADC_Start_DMA+0x108>)
 80003f8:	6802      	ldr	r2, [r0, #0]
{
 80003fa:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80003fc:	429a      	cmp	r2, r3
{
 80003fe:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000400:	d002      	beq.n	8000408 <HAL_ADC_Start_DMA+0x18>
 8000402:	493e      	ldr	r1, [pc, #248]	; (80004fc <HAL_ADC_Start_DMA+0x10c>)
 8000404:	428a      	cmp	r2, r1
 8000406:	d103      	bne.n	8000410 <HAL_ADC_Start_DMA+0x20>
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800040e:	d16e      	bne.n	80004ee <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8000410:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000414:	2b01      	cmp	r3, #1
 8000416:	d06c      	beq.n	80004f2 <HAL_ADC_Start_DMA+0x102>
 8000418:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800041a:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 800041c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8000420:	f7ff ffae 	bl	8000380 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000424:	4606      	mov	r6, r0
 8000426:	2800      	cmp	r0, #0
 8000428:	d15d      	bne.n	80004e6 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 800042a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800042c:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 800042e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000432:	4b32      	ldr	r3, [pc, #200]	; (80004fc <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8000434:	f020 0001 	bic.w	r0, r0, #1
 8000438:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800043c:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 800043e:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000440:	d104      	bne.n	800044c <HAL_ADC_Start_DMA+0x5c>
 8000442:	4a2d      	ldr	r2, [pc, #180]	; (80004f8 <HAL_ADC_Start_DMA+0x108>)
 8000444:	6853      	ldr	r3, [r2, #4]
 8000446:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800044a:	d13e      	bne.n	80004ca <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800044c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800044e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000452:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000454:	684b      	ldr	r3, [r1, #4]
 8000456:	055a      	lsls	r2, r3, #21
 8000458:	d505      	bpl.n	8000466 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800045a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800045c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000460:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000464:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000466:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000468:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800046a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800046e:	bf18      	it	ne
 8000470:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000472:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000474:	bf18      	it	ne
 8000476:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800047a:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 800047c:	2300      	movs	r3, #0
 800047e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000482:	4b1f      	ldr	r3, [pc, #124]	; (8000500 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000484:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000486:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000488:	4b1e      	ldr	r3, [pc, #120]	; (8000504 <HAL_ADC_Start_DMA+0x114>)
 800048a:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800048c:	4b1e      	ldr	r3, [pc, #120]	; (8000508 <HAL_ADC_Start_DMA+0x118>)
 800048e:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000490:	f06f 0302 	mvn.w	r3, #2
 8000494:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000498:	f851 3c44 	ldr.w	r3, [r1, #-68]
 800049c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004a0:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80004a4:	4643      	mov	r3, r8
 80004a6:	f000 f96d 	bl	8000784 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80004aa:	6823      	ldr	r3, [r4, #0]
 80004ac:	689a      	ldr	r2, [r3, #8]
 80004ae:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80004b2:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80004b6:	689a      	ldr	r2, [r3, #8]
 80004b8:	bf0c      	ite	eq
 80004ba:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80004be:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 80004c2:	609a      	str	r2, [r3, #8]
}
 80004c4:	4630      	mov	r0, r6
 80004c6:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80004ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80004cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004d0:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80004d2:	6853      	ldr	r3, [r2, #4]
 80004d4:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80004d6:	bf41      	itttt	mi
 80004d8:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 80004da:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80004de:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80004e2:	62a0      	strmi	r0, [r4, #40]	; 0x28
 80004e4:	e7bf      	b.n	8000466 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 80004e6:	2300      	movs	r3, #0
 80004e8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80004ec:	e7ea      	b.n	80004c4 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 80004ee:	2601      	movs	r6, #1
 80004f0:	e7e8      	b.n	80004c4 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 80004f2:	2602      	movs	r6, #2
 80004f4:	e7e6      	b.n	80004c4 <HAL_ADC_Start_DMA+0xd4>
 80004f6:	bf00      	nop
 80004f8:	40012400 	.word	0x40012400
 80004fc:	40012800 	.word	0x40012800
 8000500:	08000203 	.word	0x08000203
 8000504:	08000253 	.word	0x08000253
 8000508:	0800025f 	.word	0x0800025f

0800050c <ADC_ConversionStop_Disable>:
{
 800050c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800050e:	6803      	ldr	r3, [r0, #0]
{
 8000510:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000512:	689a      	ldr	r2, [r3, #8]
 8000514:	07d2      	lsls	r2, r2, #31
 8000516:	d401      	bmi.n	800051c <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8000518:	2000      	movs	r0, #0
 800051a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800051c:	689a      	ldr	r2, [r3, #8]
 800051e:	f022 0201 	bic.w	r2, r2, #1
 8000522:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000524:	f7ff fe54 	bl	80001d0 <HAL_GetTick>
 8000528:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800052a:	6823      	ldr	r3, [r4, #0]
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	07db      	lsls	r3, r3, #31
 8000530:	d5f2      	bpl.n	8000518 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000532:	f7ff fe4d 	bl	80001d0 <HAL_GetTick>
 8000536:	1b40      	subs	r0, r0, r5
 8000538:	2802      	cmp	r0, #2
 800053a:	d9f6      	bls.n	800052a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800053c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800053e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000540:	f043 0310 	orr.w	r3, r3, #16
 8000544:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000546:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800054e:	bd38      	pop	{r3, r4, r5, pc}

08000550 <HAL_ADC_Init>:
{
 8000550:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000552:	4604      	mov	r4, r0
 8000554:	2800      	cmp	r0, #0
 8000556:	d071      	beq.n	800063c <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000558:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800055a:	b923      	cbnz	r3, 8000566 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 800055c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800055e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000562:	f001 faf5 	bl	8001b50 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000566:	4620      	mov	r0, r4
 8000568:	f7ff ffd0 	bl	800050c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800056c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800056e:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000572:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000574:	d164      	bne.n	8000640 <HAL_ADC_Init+0xf0>
 8000576:	2800      	cmp	r0, #0
 8000578:	d162      	bne.n	8000640 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800057a:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 800057c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000580:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000582:	f023 0302 	bic.w	r3, r3, #2
 8000586:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800058a:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800058c:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800058e:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000590:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000592:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000596:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800059a:	d038      	beq.n	800060e <HAL_ADC_Init+0xbe>
 800059c:	2901      	cmp	r1, #1
 800059e:	bf14      	ite	ne
 80005a0:	4606      	movne	r6, r0
 80005a2:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80005a6:	7d25      	ldrb	r5, [r4, #20]
 80005a8:	2d01      	cmp	r5, #1
 80005aa:	d107      	bne.n	80005bc <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d130      	bne.n	8000612 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80005b0:	69a3      	ldr	r3, [r4, #24]
 80005b2:	3b01      	subs	r3, #1
 80005b4:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80005b8:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80005bc:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80005be:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80005c2:	685d      	ldr	r5, [r3, #4]
 80005c4:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80005c8:	ea45 0506 	orr.w	r5, r5, r6
 80005cc:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80005ce:	689e      	ldr	r6, [r3, #8]
 80005d0:	4d1d      	ldr	r5, [pc, #116]	; (8000648 <HAL_ADC_Init+0xf8>)
 80005d2:	ea05 0506 	and.w	r5, r5, r6
 80005d6:	ea45 0502 	orr.w	r5, r5, r2
 80005da:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80005dc:	d001      	beq.n	80005e2 <HAL_ADC_Init+0x92>
 80005de:	2901      	cmp	r1, #1
 80005e0:	d120      	bne.n	8000624 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80005e2:	6921      	ldr	r1, [r4, #16]
 80005e4:	3901      	subs	r1, #1
 80005e6:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80005e8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80005ea:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80005ee:	4329      	orrs	r1, r5
 80005f0:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80005f2:	6899      	ldr	r1, [r3, #8]
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <HAL_ADC_Init+0xfc>)
 80005f6:	400b      	ands	r3, r1
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d115      	bne.n	8000628 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80005fc:	2300      	movs	r3, #0
 80005fe:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000600:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000602:	f023 0303 	bic.w	r3, r3, #3
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	62a3      	str	r3, [r4, #40]	; 0x28
 800060c:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800060e:	460e      	mov	r6, r1
 8000610:	e7c9      	b.n	80005a6 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000612:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000614:	f043 0320 	orr.w	r3, r3, #32
 8000618:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800061a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000622:	e7cb      	b.n	80005bc <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000624:	2100      	movs	r1, #0
 8000626:	e7df      	b.n	80005e8 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000628:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800062a:	f023 0312 	bic.w	r3, r3, #18
 800062e:	f043 0310 	orr.w	r3, r3, #16
 8000632:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000634:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000636:	f043 0301 	orr.w	r3, r3, #1
 800063a:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800063c:	2001      	movs	r0, #1
}
 800063e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000640:	f043 0310 	orr.w	r3, r3, #16
 8000644:	62a3      	str	r3, [r4, #40]	; 0x28
 8000646:	e7f9      	b.n	800063c <HAL_ADC_Init+0xec>
 8000648:	ffe1f7fd 	.word	0xffe1f7fd
 800064c:	ff1f0efe 	.word	0xff1f0efe

08000650 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000650:	4a07      	ldr	r2, [pc, #28]	; (8000670 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000652:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000654:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000656:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800065e:	041b      	lsls	r3, r3, #16
 8000660:	0c1b      	lsrs	r3, r3, #16
 8000662:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800066a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800066c:	60d3      	str	r3, [r2, #12]
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000674:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000676:	b530      	push	{r4, r5, lr}
 8000678:	68dc      	ldr	r4, [r3, #12]
 800067a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800067e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000682:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000684:	2b04      	cmp	r3, #4
 8000686:	bf28      	it	cs
 8000688:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800068a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000690:	bf98      	it	ls
 8000692:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000694:	fa05 f303 	lsl.w	r3, r5, r3
 8000698:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069c:	bf88      	it	hi
 800069e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a0:	4019      	ands	r1, r3
 80006a2:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a4:	fa05 f404 	lsl.w	r4, r5, r4
 80006a8:	3c01      	subs	r4, #1
 80006aa:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80006ac:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ae:	ea42 0201 	orr.w	r2, r2, r1
 80006b2:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b6:	bfa9      	itett	ge
 80006b8:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	4b06      	ldrlt	r3, [pc, #24]	; (80006d8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006be:	b2d2      	uxtbge	r2, r2
 80006c0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c4:	bfbb      	ittet	lt
 80006c6:	f000 000f 	andlt.w	r0, r0, #15
 80006ca:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d0:	541a      	strblt	r2, [r3, r0]
 80006d2:	bd30      	pop	{r4, r5, pc}
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	e000ed14 	.word	0xe000ed14

080006dc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006dc:	2800      	cmp	r0, #0
 80006de:	db08      	blt.n	80006f2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006e0:	2301      	movs	r3, #1
 80006e2:	0942      	lsrs	r2, r0, #5
 80006e4:	f000 001f 	and.w	r0, r0, #31
 80006e8:	fa03 f000 	lsl.w	r0, r3, r0
 80006ec:	4b01      	ldr	r3, [pc, #4]	; (80006f4 <HAL_NVIC_EnableIRQ+0x18>)
 80006ee:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006f2:	4770      	bx	lr
 80006f4:	e000e100 	.word	0xe000e100

080006f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f8:	3801      	subs	r0, #1
 80006fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006fe:	d20a      	bcs.n	8000716 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000700:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000704:	4a06      	ldr	r2, [pc, #24]	; (8000720 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000706:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000708:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800070c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800070e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000710:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000716:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000e010 	.word	0xe000e010
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000724:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000726:	b330      	cbz	r0, 8000776 <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000728:	2214      	movs	r2, #20
 800072a:	6801      	ldr	r1, [r0, #0]
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800072e:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000730:	440b      	add	r3, r1
 8000732:	fbb3 f3f2 	udiv	r3, r3, r2
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 800073c:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 800073e:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8000740:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000742:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8000746:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000748:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800074a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800074e:	4323      	orrs	r3, r4
 8000750:	6904      	ldr	r4, [r0, #16]
 8000752:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000754:	6944      	ldr	r4, [r0, #20]
 8000756:	4323      	orrs	r3, r4
 8000758:	6984      	ldr	r4, [r0, #24]
 800075a:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800075c:	69c4      	ldr	r4, [r0, #28]
 800075e:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000760:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000762:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000764:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000766:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000768:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800076c:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800076e:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8000772:	4618      	mov	r0, r3
 8000774:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000776:	2001      	movs	r0, #1
}
 8000778:	bd10      	pop	{r4, pc}
 800077a:	bf00      	nop
 800077c:	bffdfff8 	.word	0xbffdfff8
 8000780:	40020000 	.word	0x40020000

08000784 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000784:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000786:	f890 4020 	ldrb.w	r4, [r0, #32]
 800078a:	2c01      	cmp	r4, #1
 800078c:	d035      	beq.n	80007fa <HAL_DMA_Start_IT+0x76>
 800078e:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000790:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000794:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000798:	42a5      	cmp	r5, r4
 800079a:	f04f 0600 	mov.w	r6, #0
 800079e:	f04f 0402 	mov.w	r4, #2
 80007a2:	d128      	bne.n	80007f6 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80007a4:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80007a8:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007aa:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80007ac:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80007ae:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 80007b0:	f026 0601 	bic.w	r6, r6, #1
 80007b4:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80007b6:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80007b8:	40bd      	lsls	r5, r7
 80007ba:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80007bc:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80007be:	6843      	ldr	r3, [r0, #4]
 80007c0:	6805      	ldr	r5, [r0, #0]
 80007c2:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 80007c4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80007c6:	bf0b      	itete	eq
 80007c8:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80007ca:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80007cc:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80007ce:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80007d0:	b14b      	cbz	r3, 80007e6 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80007d2:	6823      	ldr	r3, [r4, #0]
 80007d4:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80007d8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80007da:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80007dc:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	602b      	str	r3, [r5, #0]
 80007e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80007e6:	6823      	ldr	r3, [r4, #0]
 80007e8:	f023 0304 	bic.w	r3, r3, #4
 80007ec:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80007ee:	6823      	ldr	r3, [r4, #0]
 80007f0:	f043 030a 	orr.w	r3, r3, #10
 80007f4:	e7f0      	b.n	80007d8 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 80007f6:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80007fa:	2002      	movs	r0, #2
}
 80007fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000800 <HAL_DMA_IRQHandler>:
{
 8000800:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000802:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000804:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000806:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000808:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800080a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800080c:	4095      	lsls	r5, r2
 800080e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8000810:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000812:	d032      	beq.n	800087a <HAL_DMA_IRQHandler+0x7a>
 8000814:	074d      	lsls	r5, r1, #29
 8000816:	d530      	bpl.n	800087a <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800081c:	bf5e      	ittt	pl
 800081e:	681a      	ldrpl	r2, [r3, #0]
 8000820:	f022 0204 	bicpl.w	r2, r2, #4
 8000824:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000826:	4a3e      	ldr	r2, [pc, #248]	; (8000920 <HAL_DMA_IRQHandler+0x120>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d019      	beq.n	8000860 <HAL_DMA_IRQHandler+0x60>
 800082c:	3214      	adds	r2, #20
 800082e:	4293      	cmp	r3, r2
 8000830:	d018      	beq.n	8000864 <HAL_DMA_IRQHandler+0x64>
 8000832:	3214      	adds	r2, #20
 8000834:	4293      	cmp	r3, r2
 8000836:	d017      	beq.n	8000868 <HAL_DMA_IRQHandler+0x68>
 8000838:	3214      	adds	r2, #20
 800083a:	4293      	cmp	r3, r2
 800083c:	d017      	beq.n	800086e <HAL_DMA_IRQHandler+0x6e>
 800083e:	3214      	adds	r2, #20
 8000840:	4293      	cmp	r3, r2
 8000842:	d017      	beq.n	8000874 <HAL_DMA_IRQHandler+0x74>
 8000844:	3214      	adds	r2, #20
 8000846:	4293      	cmp	r3, r2
 8000848:	bf0c      	ite	eq
 800084a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800084e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8000852:	4a34      	ldr	r2, [pc, #208]	; (8000924 <HAL_DMA_IRQHandler+0x124>)
 8000854:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000856:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000858:	2b00      	cmp	r3, #0
 800085a:	d05e      	beq.n	800091a <HAL_DMA_IRQHandler+0x11a>
}
 800085c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800085e:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000860:	2304      	movs	r3, #4
 8000862:	e7f6      	b.n	8000852 <HAL_DMA_IRQHandler+0x52>
 8000864:	2340      	movs	r3, #64	; 0x40
 8000866:	e7f4      	b.n	8000852 <HAL_DMA_IRQHandler+0x52>
 8000868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800086c:	e7f1      	b.n	8000852 <HAL_DMA_IRQHandler+0x52>
 800086e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000872:	e7ee      	b.n	8000852 <HAL_DMA_IRQHandler+0x52>
 8000874:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000878:	e7eb      	b.n	8000852 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800087a:	2502      	movs	r5, #2
 800087c:	4095      	lsls	r5, r2
 800087e:	4225      	tst	r5, r4
 8000880:	d035      	beq.n	80008ee <HAL_DMA_IRQHandler+0xee>
 8000882:	078d      	lsls	r5, r1, #30
 8000884:	d533      	bpl.n	80008ee <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	0694      	lsls	r4, r2, #26
 800088a:	d406      	bmi.n	800089a <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	f022 020a 	bic.w	r2, r2, #10
 8000892:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000894:	2201      	movs	r2, #1
 8000896:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800089a:	4a21      	ldr	r2, [pc, #132]	; (8000920 <HAL_DMA_IRQHandler+0x120>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d019      	beq.n	80008d4 <HAL_DMA_IRQHandler+0xd4>
 80008a0:	3214      	adds	r2, #20
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d018      	beq.n	80008d8 <HAL_DMA_IRQHandler+0xd8>
 80008a6:	3214      	adds	r2, #20
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d017      	beq.n	80008dc <HAL_DMA_IRQHandler+0xdc>
 80008ac:	3214      	adds	r2, #20
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d017      	beq.n	80008e2 <HAL_DMA_IRQHandler+0xe2>
 80008b2:	3214      	adds	r2, #20
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d017      	beq.n	80008e8 <HAL_DMA_IRQHandler+0xe8>
 80008b8:	3214      	adds	r2, #20
 80008ba:	4293      	cmp	r3, r2
 80008bc:	bf0c      	ite	eq
 80008be:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80008c2:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80008c6:	4a17      	ldr	r2, [pc, #92]	; (8000924 <HAL_DMA_IRQHandler+0x124>)
 80008c8:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80008ca:	2300      	movs	r3, #0
 80008cc:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80008d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80008d2:	e7c1      	b.n	8000858 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80008d4:	2302      	movs	r3, #2
 80008d6:	e7f6      	b.n	80008c6 <HAL_DMA_IRQHandler+0xc6>
 80008d8:	2320      	movs	r3, #32
 80008da:	e7f4      	b.n	80008c6 <HAL_DMA_IRQHandler+0xc6>
 80008dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008e0:	e7f1      	b.n	80008c6 <HAL_DMA_IRQHandler+0xc6>
 80008e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e6:	e7ee      	b.n	80008c6 <HAL_DMA_IRQHandler+0xc6>
 80008e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008ec:	e7eb      	b.n	80008c6 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80008ee:	2508      	movs	r5, #8
 80008f0:	4095      	lsls	r5, r2
 80008f2:	4225      	tst	r5, r4
 80008f4:	d011      	beq.n	800091a <HAL_DMA_IRQHandler+0x11a>
 80008f6:	0709      	lsls	r1, r1, #28
 80008f8:	d50f      	bpl.n	800091a <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008fa:	6819      	ldr	r1, [r3, #0]
 80008fc:	f021 010e 	bic.w	r1, r1, #14
 8000900:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000902:	2301      	movs	r3, #1
 8000904:	fa03 f202 	lsl.w	r2, r3, r2
 8000908:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800090a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800090c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000910:	2300      	movs	r3, #0
 8000912:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000916:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000918:	e79e      	b.n	8000858 <HAL_DMA_IRQHandler+0x58>
}
 800091a:	bc70      	pop	{r4, r5, r6}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40020008 	.word	0x40020008
 8000924:	40020000 	.word	0x40020000

08000928 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800092c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800092e:	4626      	mov	r6, r4
 8000930:	4b66      	ldr	r3, [pc, #408]	; (8000acc <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000932:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000adc <HAL_GPIO_Init+0x1b4>
 8000936:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000ae0 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800093a:	680a      	ldr	r2, [r1, #0]
 800093c:	fa32 f506 	lsrs.w	r5, r2, r6
 8000940:	d102      	bne.n	8000948 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000942:	b003      	add	sp, #12
 8000944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000948:	f04f 0801 	mov.w	r8, #1
 800094c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000950:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000954:	4590      	cmp	r8, r2
 8000956:	d17f      	bne.n	8000a58 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000958:	684d      	ldr	r5, [r1, #4]
 800095a:	2d12      	cmp	r5, #18
 800095c:	f000 80aa 	beq.w	8000ab4 <HAL_GPIO_Init+0x18c>
 8000960:	f200 8083 	bhi.w	8000a6a <HAL_GPIO_Init+0x142>
 8000964:	2d02      	cmp	r5, #2
 8000966:	f000 80a2 	beq.w	8000aae <HAL_GPIO_Init+0x186>
 800096a:	d877      	bhi.n	8000a5c <HAL_GPIO_Init+0x134>
 800096c:	2d00      	cmp	r5, #0
 800096e:	f000 8089 	beq.w	8000a84 <HAL_GPIO_Init+0x15c>
 8000972:	2d01      	cmp	r5, #1
 8000974:	f000 8099 	beq.w	8000aaa <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000978:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800097c:	2aff      	cmp	r2, #255	; 0xff
 800097e:	bf93      	iteet	ls
 8000980:	4682      	movls	sl, r0
 8000982:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000986:	3d08      	subhi	r5, #8
 8000988:	f8d0 b000 	ldrls.w	fp, [r0]
 800098c:	bf92      	itee	ls
 800098e:	00b5      	lslls	r5, r6, #2
 8000990:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000994:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000996:	fa09 f805 	lsl.w	r8, r9, r5
 800099a:	ea2b 0808 	bic.w	r8, fp, r8
 800099e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009a2:	bf88      	it	hi
 80009a4:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009a8:	ea48 0505 	orr.w	r5, r8, r5
 80009ac:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009b0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80009b4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80009b8:	d04e      	beq.n	8000a58 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009ba:	4d45      	ldr	r5, [pc, #276]	; (8000ad0 <HAL_GPIO_Init+0x1a8>)
 80009bc:	4f44      	ldr	r7, [pc, #272]	; (8000ad0 <HAL_GPIO_Init+0x1a8>)
 80009be:	69ad      	ldr	r5, [r5, #24]
 80009c0:	f026 0803 	bic.w	r8, r6, #3
 80009c4:	f045 0501 	orr.w	r5, r5, #1
 80009c8:	61bd      	str	r5, [r7, #24]
 80009ca:	69bd      	ldr	r5, [r7, #24]
 80009cc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80009d0:	f005 0501 	and.w	r5, r5, #1
 80009d4:	9501      	str	r5, [sp, #4]
 80009d6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009da:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009de:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009e0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80009e4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009e8:	fa09 f90b 	lsl.w	r9, r9, fp
 80009ec:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009f0:	4d38      	ldr	r5, [pc, #224]	; (8000ad4 <HAL_GPIO_Init+0x1ac>)
 80009f2:	42a8      	cmp	r0, r5
 80009f4:	d063      	beq.n	8000abe <HAL_GPIO_Init+0x196>
 80009f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80009fa:	42a8      	cmp	r0, r5
 80009fc:	d061      	beq.n	8000ac2 <HAL_GPIO_Init+0x19a>
 80009fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a02:	42a8      	cmp	r0, r5
 8000a04:	d05f      	beq.n	8000ac6 <HAL_GPIO_Init+0x19e>
 8000a06:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a0a:	42a8      	cmp	r0, r5
 8000a0c:	bf0c      	ite	eq
 8000a0e:	2503      	moveq	r5, #3
 8000a10:	2504      	movne	r5, #4
 8000a12:	fa05 f50b 	lsl.w	r5, r5, fp
 8000a16:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000a1a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000a1e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a20:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000a24:	bf14      	ite	ne
 8000a26:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a28:	4395      	biceq	r5, r2
 8000a2a:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000a2c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a2e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000a32:	bf14      	ite	ne
 8000a34:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a36:	4395      	biceq	r5, r2
 8000a38:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a3a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a3c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a40:	bf14      	ite	ne
 8000a42:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a44:	4395      	biceq	r5, r2
 8000a46:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a48:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a4a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a4e:	bf14      	ite	ne
 8000a50:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a52:	ea25 0202 	biceq.w	r2, r5, r2
 8000a56:	60da      	str	r2, [r3, #12]
	position++;
 8000a58:	3601      	adds	r6, #1
 8000a5a:	e76e      	b.n	800093a <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000a5c:	2d03      	cmp	r5, #3
 8000a5e:	d022      	beq.n	8000aa6 <HAL_GPIO_Init+0x17e>
 8000a60:	2d11      	cmp	r5, #17
 8000a62:	d189      	bne.n	8000978 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a64:	68cc      	ldr	r4, [r1, #12]
 8000a66:	3404      	adds	r4, #4
          break;
 8000a68:	e786      	b.n	8000978 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000a6a:	4f1b      	ldr	r7, [pc, #108]	; (8000ad8 <HAL_GPIO_Init+0x1b0>)
 8000a6c:	42bd      	cmp	r5, r7
 8000a6e:	d009      	beq.n	8000a84 <HAL_GPIO_Init+0x15c>
 8000a70:	d812      	bhi.n	8000a98 <HAL_GPIO_Init+0x170>
 8000a72:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000ae4 <HAL_GPIO_Init+0x1bc>
 8000a76:	454d      	cmp	r5, r9
 8000a78:	d004      	beq.n	8000a84 <HAL_GPIO_Init+0x15c>
 8000a7a:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000a7e:	454d      	cmp	r5, r9
 8000a80:	f47f af7a 	bne.w	8000978 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a84:	688c      	ldr	r4, [r1, #8]
 8000a86:	b1c4      	cbz	r4, 8000aba <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a88:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000a8a:	bf0c      	ite	eq
 8000a8c:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000a90:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a94:	2408      	movs	r4, #8
 8000a96:	e76f      	b.n	8000978 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000a98:	4575      	cmp	r5, lr
 8000a9a:	d0f3      	beq.n	8000a84 <HAL_GPIO_Init+0x15c>
 8000a9c:	4565      	cmp	r5, ip
 8000a9e:	d0f1      	beq.n	8000a84 <HAL_GPIO_Init+0x15c>
 8000aa0:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000ae8 <HAL_GPIO_Init+0x1c0>
 8000aa4:	e7eb      	b.n	8000a7e <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000aa6:	2400      	movs	r4, #0
 8000aa8:	e766      	b.n	8000978 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000aaa:	68cc      	ldr	r4, [r1, #12]
          break;
 8000aac:	e764      	b.n	8000978 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000aae:	68cc      	ldr	r4, [r1, #12]
 8000ab0:	3408      	adds	r4, #8
          break;
 8000ab2:	e761      	b.n	8000978 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ab4:	68cc      	ldr	r4, [r1, #12]
 8000ab6:	340c      	adds	r4, #12
          break;
 8000ab8:	e75e      	b.n	8000978 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000aba:	2404      	movs	r4, #4
 8000abc:	e75c      	b.n	8000978 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000abe:	2500      	movs	r5, #0
 8000ac0:	e7a7      	b.n	8000a12 <HAL_GPIO_Init+0xea>
 8000ac2:	2501      	movs	r5, #1
 8000ac4:	e7a5      	b.n	8000a12 <HAL_GPIO_Init+0xea>
 8000ac6:	2502      	movs	r5, #2
 8000ac8:	e7a3      	b.n	8000a12 <HAL_GPIO_Init+0xea>
 8000aca:	bf00      	nop
 8000acc:	40010400 	.word	0x40010400
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40010800 	.word	0x40010800
 8000ad8:	10210000 	.word	0x10210000
 8000adc:	10310000 	.word	0x10310000
 8000ae0:	10320000 	.word	0x10320000
 8000ae4:	10110000 	.word	0x10110000
 8000ae8:	10220000 	.word	0x10220000

08000aec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000aec:	6883      	ldr	r3, [r0, #8]
 8000aee:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000af0:	bf14      	ite	ne
 8000af2:	2001      	movne	r0, #1
 8000af4:	2000      	moveq	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000af8:	b10a      	cbz	r2, 8000afe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000afa:	6101      	str	r1, [r0, #16]
 8000afc:	4770      	bx	lr
 8000afe:	0409      	lsls	r1, r1, #16
 8000b00:	e7fb      	b.n	8000afa <HAL_GPIO_WritePin+0x2>
	...

08000b04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b08:	4605      	mov	r5, r0
 8000b0a:	b908      	cbnz	r0, 8000b10 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	e03c      	b.n	8000b8a <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b10:	6803      	ldr	r3, [r0, #0]
 8000b12:	07db      	lsls	r3, r3, #31
 8000b14:	d410      	bmi.n	8000b38 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b16:	682b      	ldr	r3, [r5, #0]
 8000b18:	079f      	lsls	r7, r3, #30
 8000b1a:	d45d      	bmi.n	8000bd8 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b1c:	682b      	ldr	r3, [r5, #0]
 8000b1e:	0719      	lsls	r1, r3, #28
 8000b20:	f100 8094 	bmi.w	8000c4c <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b24:	682b      	ldr	r3, [r5, #0]
 8000b26:	075a      	lsls	r2, r3, #29
 8000b28:	f100 80be 	bmi.w	8000ca8 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b2c:	69e8      	ldr	r0, [r5, #28]
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	f040 812c 	bne.w	8000d8c <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000b34:	2000      	movs	r0, #0
 8000b36:	e028      	b.n	8000b8a <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b38:	4c8f      	ldr	r4, [pc, #572]	; (8000d78 <HAL_RCC_OscConfig+0x274>)
 8000b3a:	6863      	ldr	r3, [r4, #4]
 8000b3c:	f003 030c 	and.w	r3, r3, #12
 8000b40:	2b04      	cmp	r3, #4
 8000b42:	d007      	beq.n	8000b54 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b44:	6863      	ldr	r3, [r4, #4]
 8000b46:	f003 030c 	and.w	r3, r3, #12
 8000b4a:	2b08      	cmp	r3, #8
 8000b4c:	d109      	bne.n	8000b62 <HAL_RCC_OscConfig+0x5e>
 8000b4e:	6863      	ldr	r3, [r4, #4]
 8000b50:	03de      	lsls	r6, r3, #15
 8000b52:	d506      	bpl.n	8000b62 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b54:	6823      	ldr	r3, [r4, #0]
 8000b56:	039c      	lsls	r4, r3, #14
 8000b58:	d5dd      	bpl.n	8000b16 <HAL_RCC_OscConfig+0x12>
 8000b5a:	686b      	ldr	r3, [r5, #4]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1da      	bne.n	8000b16 <HAL_RCC_OscConfig+0x12>
 8000b60:	e7d4      	b.n	8000b0c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b62:	686b      	ldr	r3, [r5, #4]
 8000b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b68:	d112      	bne.n	8000b90 <HAL_RCC_OscConfig+0x8c>
 8000b6a:	6823      	ldr	r3, [r4, #0]
 8000b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b70:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b72:	f7ff fb2d 	bl	80001d0 <HAL_GetTick>
 8000b76:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b78:	6823      	ldr	r3, [r4, #0]
 8000b7a:	0398      	lsls	r0, r3, #14
 8000b7c:	d4cb      	bmi.n	8000b16 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b7e:	f7ff fb27 	bl	80001d0 <HAL_GetTick>
 8000b82:	1b80      	subs	r0, r0, r6
 8000b84:	2864      	cmp	r0, #100	; 0x64
 8000b86:	d9f7      	bls.n	8000b78 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000b88:	2003      	movs	r0, #3
}
 8000b8a:	b002      	add	sp, #8
 8000b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b90:	b99b      	cbnz	r3, 8000bba <HAL_RCC_OscConfig+0xb6>
 8000b92:	6823      	ldr	r3, [r4, #0]
 8000b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b98:	6023      	str	r3, [r4, #0]
 8000b9a:	6823      	ldr	r3, [r4, #0]
 8000b9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ba0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ba2:	f7ff fb15 	bl	80001d0 <HAL_GetTick>
 8000ba6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ba8:	6823      	ldr	r3, [r4, #0]
 8000baa:	0399      	lsls	r1, r3, #14
 8000bac:	d5b3      	bpl.n	8000b16 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bae:	f7ff fb0f 	bl	80001d0 <HAL_GetTick>
 8000bb2:	1b80      	subs	r0, r0, r6
 8000bb4:	2864      	cmp	r0, #100	; 0x64
 8000bb6:	d9f7      	bls.n	8000ba8 <HAL_RCC_OscConfig+0xa4>
 8000bb8:	e7e6      	b.n	8000b88 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bbe:	6823      	ldr	r3, [r4, #0]
 8000bc0:	d103      	bne.n	8000bca <HAL_RCC_OscConfig+0xc6>
 8000bc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bc6:	6023      	str	r3, [r4, #0]
 8000bc8:	e7cf      	b.n	8000b6a <HAL_RCC_OscConfig+0x66>
 8000bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bce:	6023      	str	r3, [r4, #0]
 8000bd0:	6823      	ldr	r3, [r4, #0]
 8000bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bd6:	e7cb      	b.n	8000b70 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bd8:	4c67      	ldr	r4, [pc, #412]	; (8000d78 <HAL_RCC_OscConfig+0x274>)
 8000bda:	6863      	ldr	r3, [r4, #4]
 8000bdc:	f013 0f0c 	tst.w	r3, #12
 8000be0:	d007      	beq.n	8000bf2 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000be2:	6863      	ldr	r3, [r4, #4]
 8000be4:	f003 030c 	and.w	r3, r3, #12
 8000be8:	2b08      	cmp	r3, #8
 8000bea:	d110      	bne.n	8000c0e <HAL_RCC_OscConfig+0x10a>
 8000bec:	6863      	ldr	r3, [r4, #4]
 8000bee:	03da      	lsls	r2, r3, #15
 8000bf0:	d40d      	bmi.n	8000c0e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bf2:	6823      	ldr	r3, [r4, #0]
 8000bf4:	079b      	lsls	r3, r3, #30
 8000bf6:	d502      	bpl.n	8000bfe <HAL_RCC_OscConfig+0xfa>
 8000bf8:	692b      	ldr	r3, [r5, #16]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d186      	bne.n	8000b0c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bfe:	6823      	ldr	r3, [r4, #0]
 8000c00:	696a      	ldr	r2, [r5, #20]
 8000c02:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000c06:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c0a:	6023      	str	r3, [r4, #0]
 8000c0c:	e786      	b.n	8000b1c <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c0e:	692a      	ldr	r2, [r5, #16]
 8000c10:	4b5a      	ldr	r3, [pc, #360]	; (8000d7c <HAL_RCC_OscConfig+0x278>)
 8000c12:	b16a      	cbz	r2, 8000c30 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000c14:	2201      	movs	r2, #1
 8000c16:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c18:	f7ff fada 	bl	80001d0 <HAL_GetTick>
 8000c1c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c1e:	6823      	ldr	r3, [r4, #0]
 8000c20:	079f      	lsls	r7, r3, #30
 8000c22:	d4ec      	bmi.n	8000bfe <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c24:	f7ff fad4 	bl	80001d0 <HAL_GetTick>
 8000c28:	1b80      	subs	r0, r0, r6
 8000c2a:	2802      	cmp	r0, #2
 8000c2c:	d9f7      	bls.n	8000c1e <HAL_RCC_OscConfig+0x11a>
 8000c2e:	e7ab      	b.n	8000b88 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000c30:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c32:	f7ff facd 	bl	80001d0 <HAL_GetTick>
 8000c36:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c38:	6823      	ldr	r3, [r4, #0]
 8000c3a:	0798      	lsls	r0, r3, #30
 8000c3c:	f57f af6e 	bpl.w	8000b1c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c40:	f7ff fac6 	bl	80001d0 <HAL_GetTick>
 8000c44:	1b80      	subs	r0, r0, r6
 8000c46:	2802      	cmp	r0, #2
 8000c48:	d9f6      	bls.n	8000c38 <HAL_RCC_OscConfig+0x134>
 8000c4a:	e79d      	b.n	8000b88 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c4c:	69aa      	ldr	r2, [r5, #24]
 8000c4e:	4c4a      	ldr	r4, [pc, #296]	; (8000d78 <HAL_RCC_OscConfig+0x274>)
 8000c50:	4b4b      	ldr	r3, [pc, #300]	; (8000d80 <HAL_RCC_OscConfig+0x27c>)
 8000c52:	b1da      	cbz	r2, 8000c8c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000c54:	2201      	movs	r2, #1
 8000c56:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c58:	f7ff faba 	bl	80001d0 <HAL_GetTick>
 8000c5c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c60:	079b      	lsls	r3, r3, #30
 8000c62:	d50d      	bpl.n	8000c80 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000c64:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000c68:	4b46      	ldr	r3, [pc, #280]	; (8000d84 <HAL_RCC_OscConfig+0x280>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c70:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000c72:	bf00      	nop
  }
  while (Delay --);
 8000c74:	9b01      	ldr	r3, [sp, #4]
 8000c76:	1e5a      	subs	r2, r3, #1
 8000c78:	9201      	str	r2, [sp, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d1f9      	bne.n	8000c72 <HAL_RCC_OscConfig+0x16e>
 8000c7e:	e751      	b.n	8000b24 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c80:	f7ff faa6 	bl	80001d0 <HAL_GetTick>
 8000c84:	1b80      	subs	r0, r0, r6
 8000c86:	2802      	cmp	r0, #2
 8000c88:	d9e9      	bls.n	8000c5e <HAL_RCC_OscConfig+0x15a>
 8000c8a:	e77d      	b.n	8000b88 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000c8c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c8e:	f7ff fa9f 	bl	80001d0 <HAL_GetTick>
 8000c92:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c96:	079f      	lsls	r7, r3, #30
 8000c98:	f57f af44 	bpl.w	8000b24 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c9c:	f7ff fa98 	bl	80001d0 <HAL_GetTick>
 8000ca0:	1b80      	subs	r0, r0, r6
 8000ca2:	2802      	cmp	r0, #2
 8000ca4:	d9f6      	bls.n	8000c94 <HAL_RCC_OscConfig+0x190>
 8000ca6:	e76f      	b.n	8000b88 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ca8:	4c33      	ldr	r4, [pc, #204]	; (8000d78 <HAL_RCC_OscConfig+0x274>)
 8000caa:	69e3      	ldr	r3, [r4, #28]
 8000cac:	00d8      	lsls	r0, r3, #3
 8000cae:	d424      	bmi.n	8000cfa <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000cb0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	69e3      	ldr	r3, [r4, #28]
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	61e3      	str	r3, [r4, #28]
 8000cba:	69e3      	ldr	r3, [r4, #28]
 8000cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cc4:	4e30      	ldr	r6, [pc, #192]	; (8000d88 <HAL_RCC_OscConfig+0x284>)
 8000cc6:	6833      	ldr	r3, [r6, #0]
 8000cc8:	05d9      	lsls	r1, r3, #23
 8000cca:	d518      	bpl.n	8000cfe <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ccc:	68eb      	ldr	r3, [r5, #12]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d126      	bne.n	8000d20 <HAL_RCC_OscConfig+0x21c>
 8000cd2:	6a23      	ldr	r3, [r4, #32]
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000cda:	f7ff fa79 	bl	80001d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cde:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ce2:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ce4:	6a23      	ldr	r3, [r4, #32]
 8000ce6:	079b      	lsls	r3, r3, #30
 8000ce8:	d53f      	bpl.n	8000d6a <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000cea:	2f00      	cmp	r7, #0
 8000cec:	f43f af1e 	beq.w	8000b2c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cf0:	69e3      	ldr	r3, [r4, #28]
 8000cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	61e3      	str	r3, [r4, #28]
 8000cf8:	e718      	b.n	8000b2c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000cfa:	2700      	movs	r7, #0
 8000cfc:	e7e2      	b.n	8000cc4 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cfe:	6833      	ldr	r3, [r6, #0]
 8000d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d04:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000d06:	f7ff fa63 	bl	80001d0 <HAL_GetTick>
 8000d0a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d0c:	6833      	ldr	r3, [r6, #0]
 8000d0e:	05da      	lsls	r2, r3, #23
 8000d10:	d4dc      	bmi.n	8000ccc <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d12:	f7ff fa5d 	bl	80001d0 <HAL_GetTick>
 8000d16:	eba0 0008 	sub.w	r0, r0, r8
 8000d1a:	2864      	cmp	r0, #100	; 0x64
 8000d1c:	d9f6      	bls.n	8000d0c <HAL_RCC_OscConfig+0x208>
 8000d1e:	e733      	b.n	8000b88 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d20:	b9ab      	cbnz	r3, 8000d4e <HAL_RCC_OscConfig+0x24a>
 8000d22:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d24:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d28:	f023 0301 	bic.w	r3, r3, #1
 8000d2c:	6223      	str	r3, [r4, #32]
 8000d2e:	6a23      	ldr	r3, [r4, #32]
 8000d30:	f023 0304 	bic.w	r3, r3, #4
 8000d34:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000d36:	f7ff fa4b 	bl	80001d0 <HAL_GetTick>
 8000d3a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d3c:	6a23      	ldr	r3, [r4, #32]
 8000d3e:	0798      	lsls	r0, r3, #30
 8000d40:	d5d3      	bpl.n	8000cea <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d42:	f7ff fa45 	bl	80001d0 <HAL_GetTick>
 8000d46:	1b80      	subs	r0, r0, r6
 8000d48:	4540      	cmp	r0, r8
 8000d4a:	d9f7      	bls.n	8000d3c <HAL_RCC_OscConfig+0x238>
 8000d4c:	e71c      	b.n	8000b88 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d4e:	2b05      	cmp	r3, #5
 8000d50:	6a23      	ldr	r3, [r4, #32]
 8000d52:	d103      	bne.n	8000d5c <HAL_RCC_OscConfig+0x258>
 8000d54:	f043 0304 	orr.w	r3, r3, #4
 8000d58:	6223      	str	r3, [r4, #32]
 8000d5a:	e7ba      	b.n	8000cd2 <HAL_RCC_OscConfig+0x1ce>
 8000d5c:	f023 0301 	bic.w	r3, r3, #1
 8000d60:	6223      	str	r3, [r4, #32]
 8000d62:	6a23      	ldr	r3, [r4, #32]
 8000d64:	f023 0304 	bic.w	r3, r3, #4
 8000d68:	e7b6      	b.n	8000cd8 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d6a:	f7ff fa31 	bl	80001d0 <HAL_GetTick>
 8000d6e:	eba0 0008 	sub.w	r0, r0, r8
 8000d72:	42b0      	cmp	r0, r6
 8000d74:	d9b6      	bls.n	8000ce4 <HAL_RCC_OscConfig+0x1e0>
 8000d76:	e707      	b.n	8000b88 <HAL_RCC_OscConfig+0x84>
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	42420000 	.word	0x42420000
 8000d80:	42420480 	.word	0x42420480
 8000d84:	20000008 	.word	0x20000008
 8000d88:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d8c:	4b2a      	ldr	r3, [pc, #168]	; (8000e38 <HAL_RCC_OscConfig+0x334>)
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	461c      	mov	r4, r3
 8000d92:	f002 020c 	and.w	r2, r2, #12
 8000d96:	2a08      	cmp	r2, #8
 8000d98:	d03d      	beq.n	8000e16 <HAL_RCC_OscConfig+0x312>
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	4e27      	ldr	r6, [pc, #156]	; (8000e3c <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d9e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000da0:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000da2:	d12b      	bne.n	8000dfc <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000da4:	f7ff fa14 	bl	80001d0 <HAL_GetTick>
 8000da8:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000daa:	6823      	ldr	r3, [r4, #0]
 8000dac:	0199      	lsls	r1, r3, #6
 8000dae:	d41f      	bmi.n	8000df0 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000db0:	6a2b      	ldr	r3, [r5, #32]
 8000db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000db6:	d105      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000db8:	6862      	ldr	r2, [r4, #4]
 8000dba:	68a9      	ldr	r1, [r5, #8]
 8000dbc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000dc4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000dc6:	6862      	ldr	r2, [r4, #4]
 8000dc8:	430b      	orrs	r3, r1
 8000dca:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000dd6:	f7ff f9fb 	bl	80001d0 <HAL_GetTick>
 8000dda:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ddc:	6823      	ldr	r3, [r4, #0]
 8000dde:	019a      	lsls	r2, r3, #6
 8000de0:	f53f aea8 	bmi.w	8000b34 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000de4:	f7ff f9f4 	bl	80001d0 <HAL_GetTick>
 8000de8:	1b40      	subs	r0, r0, r5
 8000dea:	2802      	cmp	r0, #2
 8000dec:	d9f6      	bls.n	8000ddc <HAL_RCC_OscConfig+0x2d8>
 8000dee:	e6cb      	b.n	8000b88 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000df0:	f7ff f9ee 	bl	80001d0 <HAL_GetTick>
 8000df4:	1bc0      	subs	r0, r0, r7
 8000df6:	2802      	cmp	r0, #2
 8000df8:	d9d7      	bls.n	8000daa <HAL_RCC_OscConfig+0x2a6>
 8000dfa:	e6c5      	b.n	8000b88 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000dfc:	f7ff f9e8 	bl	80001d0 <HAL_GetTick>
 8000e00:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e02:	6823      	ldr	r3, [r4, #0]
 8000e04:	019b      	lsls	r3, r3, #6
 8000e06:	f57f ae95 	bpl.w	8000b34 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e0a:	f7ff f9e1 	bl	80001d0 <HAL_GetTick>
 8000e0e:	1b40      	subs	r0, r0, r5
 8000e10:	2802      	cmp	r0, #2
 8000e12:	d9f6      	bls.n	8000e02 <HAL_RCC_OscConfig+0x2fe>
 8000e14:	e6b8      	b.n	8000b88 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e16:	2801      	cmp	r0, #1
 8000e18:	f43f aeb7 	beq.w	8000b8a <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8000e1c:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e1e:	6a2b      	ldr	r3, [r5, #32]
 8000e20:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000e24:	429a      	cmp	r2, r3
 8000e26:	f47f ae71 	bne.w	8000b0c <HAL_RCC_OscConfig+0x8>
 8000e2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000e2c:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000e30:	1ac0      	subs	r0, r0, r3
 8000e32:	bf18      	it	ne
 8000e34:	2001      	movne	r0, #1
 8000e36:	e6a8      	b.n	8000b8a <HAL_RCC_OscConfig+0x86>
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	42420060 	.word	0x42420060

08000e40 <HAL_RCC_GetSysClockFreq>:
{
 8000e40:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e42:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000e44:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e46:	ac02      	add	r4, sp, #8
 8000e48:	f103 0510 	add.w	r5, r3, #16
 8000e4c:	4622      	mov	r2, r4
 8000e4e:	6818      	ldr	r0, [r3, #0]
 8000e50:	6859      	ldr	r1, [r3, #4]
 8000e52:	3308      	adds	r3, #8
 8000e54:	c203      	stmia	r2!, {r0, r1}
 8000e56:	42ab      	cmp	r3, r5
 8000e58:	4614      	mov	r4, r2
 8000e5a:	d1f7      	bne.n	8000e4c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	f88d 3004 	strb.w	r3, [sp, #4]
 8000e62:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000e64:	4911      	ldr	r1, [pc, #68]	; (8000eac <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e66:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000e6a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000e6c:	f003 020c 	and.w	r2, r3, #12
 8000e70:	2a08      	cmp	r2, #8
 8000e72:	d117      	bne.n	8000ea4 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e74:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000e78:	a806      	add	r0, sp, #24
 8000e7a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e7c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e7e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e82:	d50c      	bpl.n	8000e9e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e84:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e86:	480a      	ldr	r0, [pc, #40]	; (8000eb0 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e88:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e8c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e8e:	aa06      	add	r2, sp, #24
 8000e90:	4413      	add	r3, r2
 8000e92:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e96:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000e9a:	b007      	add	sp, #28
 8000e9c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <HAL_RCC_GetSysClockFreq+0x74>)
 8000ea0:	4350      	muls	r0, r2
 8000ea2:	e7fa      	b.n	8000e9a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000ea6:	e7f8      	b.n	8000e9a <HAL_RCC_GetSysClockFreq+0x5a>
 8000ea8:	08001dcc 	.word	0x08001dcc
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	007a1200 	.word	0x007a1200
 8000eb4:	003d0900 	.word	0x003d0900

08000eb8 <HAL_RCC_ClockConfig>:
{
 8000eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ebc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	b910      	cbnz	r0, 8000ec8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000ec8:	4a45      	ldr	r2, [pc, #276]	; (8000fe0 <HAL_RCC_ClockConfig+0x128>)
 8000eca:	6813      	ldr	r3, [r2, #0]
 8000ecc:	f003 0307 	and.w	r3, r3, #7
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	d329      	bcc.n	8000f28 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ed4:	6821      	ldr	r1, [r4, #0]
 8000ed6:	078e      	lsls	r6, r1, #30
 8000ed8:	d431      	bmi.n	8000f3e <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000eda:	07ca      	lsls	r2, r1, #31
 8000edc:	d444      	bmi.n	8000f68 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000ede:	4a40      	ldr	r2, [pc, #256]	; (8000fe0 <HAL_RCC_ClockConfig+0x128>)
 8000ee0:	6813      	ldr	r3, [r2, #0]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	429d      	cmp	r5, r3
 8000ee8:	d367      	bcc.n	8000fba <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000eea:	6822      	ldr	r2, [r4, #0]
 8000eec:	4d3d      	ldr	r5, [pc, #244]	; (8000fe4 <HAL_RCC_ClockConfig+0x12c>)
 8000eee:	f012 0f04 	tst.w	r2, #4
 8000ef2:	d16e      	bne.n	8000fd2 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ef4:	0713      	lsls	r3, r2, #28
 8000ef6:	d506      	bpl.n	8000f06 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000ef8:	686b      	ldr	r3, [r5, #4]
 8000efa:	6922      	ldr	r2, [r4, #16]
 8000efc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000f00:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f04:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000f06:	f7ff ff9b 	bl	8000e40 <HAL_RCC_GetSysClockFreq>
 8000f0a:	686b      	ldr	r3, [r5, #4]
 8000f0c:	4a36      	ldr	r2, [pc, #216]	; (8000fe8 <HAL_RCC_ClockConfig+0x130>)
 8000f0e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f12:	5cd3      	ldrb	r3, [r2, r3]
 8000f14:	40d8      	lsrs	r0, r3
 8000f16:	4b35      	ldr	r3, [pc, #212]	; (8000fec <HAL_RCC_ClockConfig+0x134>)
 8000f18:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000f1a:	4b35      	ldr	r3, [pc, #212]	; (8000ff0 <HAL_RCC_ClockConfig+0x138>)
 8000f1c:	6818      	ldr	r0, [r3, #0]
 8000f1e:	f7ff f915 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000f22:	2000      	movs	r0, #0
 8000f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f28:	6813      	ldr	r3, [r2, #0]
 8000f2a:	f023 0307 	bic.w	r3, r3, #7
 8000f2e:	430b      	orrs	r3, r1
 8000f30:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f32:	6813      	ldr	r3, [r2, #0]
 8000f34:	f003 0307 	and.w	r3, r3, #7
 8000f38:	4299      	cmp	r1, r3
 8000f3a:	d1c2      	bne.n	8000ec2 <HAL_RCC_ClockConfig+0xa>
 8000f3c:	e7ca      	b.n	8000ed4 <HAL_RCC_ClockConfig+0x1c>
 8000f3e:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f40:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f44:	bf1e      	ittt	ne
 8000f46:	685a      	ldrne	r2, [r3, #4]
 8000f48:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000f4c:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f4e:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f50:	bf42      	ittt	mi
 8000f52:	685a      	ldrmi	r2, [r3, #4]
 8000f54:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000f58:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	68a0      	ldr	r0, [r4, #8]
 8000f5e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000f62:	4302      	orrs	r2, r0
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	e7b8      	b.n	8000eda <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f68:	6862      	ldr	r2, [r4, #4]
 8000f6a:	4e1e      	ldr	r6, [pc, #120]	; (8000fe4 <HAL_RCC_ClockConfig+0x12c>)
 8000f6c:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6e:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f70:	d11b      	bne.n	8000faa <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f72:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f76:	d0a4      	beq.n	8000ec2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f78:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f7a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f7e:	f023 0303 	bic.w	r3, r3, #3
 8000f82:	4313      	orrs	r3, r2
 8000f84:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000f86:	f7ff f923 	bl	80001d0 <HAL_GetTick>
 8000f8a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f8c:	6873      	ldr	r3, [r6, #4]
 8000f8e:	6862      	ldr	r2, [r4, #4]
 8000f90:	f003 030c 	and.w	r3, r3, #12
 8000f94:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000f98:	d0a1      	beq.n	8000ede <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f9a:	f7ff f919 	bl	80001d0 <HAL_GetTick>
 8000f9e:	1bc0      	subs	r0, r0, r7
 8000fa0:	4540      	cmp	r0, r8
 8000fa2:	d9f3      	bls.n	8000f8c <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000fa4:	2003      	movs	r0, #3
}
 8000fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000faa:	2a02      	cmp	r2, #2
 8000fac:	d102      	bne.n	8000fb4 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000fb2:	e7e0      	b.n	8000f76 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb4:	f013 0f02 	tst.w	r3, #2
 8000fb8:	e7dd      	b.n	8000f76 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fba:	6813      	ldr	r3, [r2, #0]
 8000fbc:	f023 0307 	bic.w	r3, r3, #7
 8000fc0:	432b      	orrs	r3, r5
 8000fc2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fc4:	6813      	ldr	r3, [r2, #0]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	429d      	cmp	r5, r3
 8000fcc:	f47f af79 	bne.w	8000ec2 <HAL_RCC_ClockConfig+0xa>
 8000fd0:	e78b      	b.n	8000eea <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fd2:	686b      	ldr	r3, [r5, #4]
 8000fd4:	68e1      	ldr	r1, [r4, #12]
 8000fd6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fda:	430b      	orrs	r3, r1
 8000fdc:	606b      	str	r3, [r5, #4]
 8000fde:	e789      	b.n	8000ef4 <HAL_RCC_ClockConfig+0x3c>
 8000fe0:	40022000 	.word	0x40022000
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	08001ddc 	.word	0x08001ddc
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	20000004 	.word	0x20000004

08000ff4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000ff6:	4a05      	ldr	r2, [pc, #20]	; (800100c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000ffe:	5cd3      	ldrb	r3, [r2, r3]
 8001000:	4a03      	ldr	r2, [pc, #12]	; (8001010 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001002:	6810      	ldr	r0, [r2, #0]
}
 8001004:	40d8      	lsrs	r0, r3
 8001006:	4770      	bx	lr
 8001008:	40021000 	.word	0x40021000
 800100c:	08001dec 	.word	0x08001dec
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800101e:	5cd3      	ldrb	r3, [r2, r3]
 8001020:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001022:	6810      	ldr	r0, [r2, #0]
}
 8001024:	40d8      	lsrs	r0, r3
 8001026:	4770      	bx	lr
 8001028:	40021000 	.word	0x40021000
 800102c:	08001dec 	.word	0x08001dec
 8001030:	20000008 	.word	0x20000008

08001034 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001034:	6803      	ldr	r3, [r0, #0]
{
 8001036:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800103a:	07d9      	lsls	r1, r3, #31
{
 800103c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800103e:	d520      	bpl.n	8001082 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001040:	4c35      	ldr	r4, [pc, #212]	; (8001118 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001042:	69e3      	ldr	r3, [r4, #28]
 8001044:	00da      	lsls	r2, r3, #3
 8001046:	d432      	bmi.n	80010ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001048:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	69e3      	ldr	r3, [r4, #28]
 800104c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001050:	61e3      	str	r3, [r4, #28]
 8001052:	69e3      	ldr	r3, [r4, #28]
 8001054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800105c:	4e2f      	ldr	r6, [pc, #188]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800105e:	6833      	ldr	r3, [r6, #0]
 8001060:	05db      	lsls	r3, r3, #23
 8001062:	d526      	bpl.n	80010b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001064:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001066:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800106a:	d136      	bne.n	80010da <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800106c:	6a23      	ldr	r3, [r4, #32]
 800106e:	686a      	ldr	r2, [r5, #4]
 8001070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001074:	4313      	orrs	r3, r2
 8001076:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001078:	b11f      	cbz	r7, 8001082 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800107a:	69e3      	ldr	r3, [r4, #28]
 800107c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001080:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001082:	6828      	ldr	r0, [r5, #0]
 8001084:	0783      	lsls	r3, r0, #30
 8001086:	d506      	bpl.n	8001096 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001088:	4a23      	ldr	r2, [pc, #140]	; (8001118 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800108a:	68a9      	ldr	r1, [r5, #8]
 800108c:	6853      	ldr	r3, [r2, #4]
 800108e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001092:	430b      	orrs	r3, r1
 8001094:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001096:	f010 0010 	ands.w	r0, r0, #16
 800109a:	d01b      	beq.n	80010d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800109c:	4a1e      	ldr	r2, [pc, #120]	; (8001118 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800109e:	68e9      	ldr	r1, [r5, #12]
 80010a0:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80010a2:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80010a4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80010a8:	430b      	orrs	r3, r1
 80010aa:	6053      	str	r3, [r2, #4]
 80010ac:	e012      	b.n	80010d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80010ae:	2700      	movs	r7, #0
 80010b0:	e7d4      	b.n	800105c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010b2:	6833      	ldr	r3, [r6, #0]
 80010b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80010ba:	f7ff f889 	bl	80001d0 <HAL_GetTick>
 80010be:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c0:	6833      	ldr	r3, [r6, #0]
 80010c2:	05d8      	lsls	r0, r3, #23
 80010c4:	d4ce      	bmi.n	8001064 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c6:	f7ff f883 	bl	80001d0 <HAL_GetTick>
 80010ca:	eba0 0008 	sub.w	r0, r0, r8
 80010ce:	2864      	cmp	r0, #100	; 0x64
 80010d0:	d9f6      	bls.n	80010c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80010d2:	2003      	movs	r0, #3
}
 80010d4:	b002      	add	sp, #8
 80010d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80010da:	686a      	ldr	r2, [r5, #4]
 80010dc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d0c3      	beq.n	800106c <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80010e4:	2001      	movs	r0, #1
 80010e6:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80010e8:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80010ea:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80010ec:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80010ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80010f2:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80010f4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80010f6:	07d9      	lsls	r1, r3, #31
 80010f8:	d5b8      	bpl.n	800106c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80010fa:	f7ff f869 	bl	80001d0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010fe:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001102:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001104:	6a23      	ldr	r3, [r4, #32]
 8001106:	079a      	lsls	r2, r3, #30
 8001108:	d4b0      	bmi.n	800106c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800110a:	f7ff f861 	bl	80001d0 <HAL_GetTick>
 800110e:	1b80      	subs	r0, r0, r6
 8001110:	4540      	cmp	r0, r8
 8001112:	d9f7      	bls.n	8001104 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001114:	e7dd      	b.n	80010d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000
 800111c:	40007000 	.word	0x40007000
 8001120:	42420440 	.word	0x42420440

08001124 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001124:	6a03      	ldr	r3, [r0, #32]
{
 8001126:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001128:	f023 0301 	bic.w	r3, r3, #1
 800112c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800112e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001130:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001132:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001134:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001136:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800113a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800113c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800113e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001142:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001144:	4d0a      	ldr	r5, [pc, #40]	; (8001170 <TIM_OC1_SetConfig+0x4c>)
 8001146:	42a8      	cmp	r0, r5
 8001148:	d10b      	bne.n	8001162 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800114a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800114c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001150:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001152:	698e      	ldr	r6, [r1, #24]
 8001154:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001156:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800115a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800115c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001160:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001162:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001164:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001166:	684a      	ldr	r2, [r1, #4]
 8001168:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800116a:	6203      	str	r3, [r0, #32]
 800116c:	bd70      	pop	{r4, r5, r6, pc}
 800116e:	bf00      	nop
 8001170:	40012c00 	.word	0x40012c00

08001174 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001174:	6a03      	ldr	r3, [r0, #32]
{
 8001176:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800117c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800117e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001180:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001182:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001184:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001186:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800118a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800118c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800118e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001192:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001196:	4d0b      	ldr	r5, [pc, #44]	; (80011c4 <TIM_OC3_SetConfig+0x50>)
 8001198:	42a8      	cmp	r0, r5
 800119a:	d10d      	bne.n	80011b8 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800119c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800119e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80011a2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80011a6:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80011a8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80011aa:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80011ae:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80011b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80011b4:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80011b8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80011ba:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80011bc:	684a      	ldr	r2, [r1, #4]
 80011be:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80011c0:	6203      	str	r3, [r0, #32]
 80011c2:	bd70      	pop	{r4, r5, r6, pc}
 80011c4:	40012c00 	.word	0x40012c00

080011c8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80011c8:	6a03      	ldr	r3, [r0, #32]
{
 80011ca:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80011cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011d0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80011d2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80011d4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80011d6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80011d8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80011da:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80011de:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80011e2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80011e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80011e8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80011ec:	4d06      	ldr	r5, [pc, #24]	; (8001208 <TIM_OC4_SetConfig+0x40>)
 80011ee:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80011f0:	bf02      	ittt	eq
 80011f2:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80011f4:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80011f8:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80011fc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80011fe:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001200:	684a      	ldr	r2, [r1, #4]
 8001202:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001204:	6203      	str	r3, [r0, #32]
 8001206:	bd30      	pop	{r4, r5, pc}
 8001208:	40012c00 	.word	0x40012c00

0800120c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800120c:	4a1a      	ldr	r2, [pc, #104]	; (8001278 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800120e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001210:	4290      	cmp	r0, r2
 8001212:	d00a      	beq.n	800122a <TIM_Base_SetConfig+0x1e>
 8001214:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001218:	d007      	beq.n	800122a <TIM_Base_SetConfig+0x1e>
 800121a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800121e:	4290      	cmp	r0, r2
 8001220:	d003      	beq.n	800122a <TIM_Base_SetConfig+0x1e>
 8001222:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001226:	4290      	cmp	r0, r2
 8001228:	d115      	bne.n	8001256 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800122a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800122c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001230:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001232:	4a11      	ldr	r2, [pc, #68]	; (8001278 <TIM_Base_SetConfig+0x6c>)
 8001234:	4290      	cmp	r0, r2
 8001236:	d00a      	beq.n	800124e <TIM_Base_SetConfig+0x42>
 8001238:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800123c:	d007      	beq.n	800124e <TIM_Base_SetConfig+0x42>
 800123e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001242:	4290      	cmp	r0, r2
 8001244:	d003      	beq.n	800124e <TIM_Base_SetConfig+0x42>
 8001246:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800124a:	4290      	cmp	r0, r2
 800124c:	d103      	bne.n	8001256 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800124e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001254:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001256:	694a      	ldr	r2, [r1, #20]
 8001258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800125c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800125e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001260:	688b      	ldr	r3, [r1, #8]
 8001262:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001264:	680b      	ldr	r3, [r1, #0]
 8001266:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001268:	4b03      	ldr	r3, [pc, #12]	; (8001278 <TIM_Base_SetConfig+0x6c>)
 800126a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 800126c:	bf04      	itt	eq
 800126e:	690b      	ldreq	r3, [r1, #16]
 8001270:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001272:	2301      	movs	r3, #1
 8001274:	6143      	str	r3, [r0, #20]
 8001276:	4770      	bx	lr
 8001278:	40012c00 	.word	0x40012c00

0800127c <HAL_TIM_PWM_Init>:
{
 800127c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800127e:	4604      	mov	r4, r0
 8001280:	b330      	cbz	r0, 80012d0 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001282:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001286:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800128a:	b91b      	cbnz	r3, 8001294 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800128c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001290:	f000 fcaa 	bl	8001be8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001294:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001296:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001298:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800129c:	1d21      	adds	r1, r4, #4
 800129e:	f7ff ffb5 	bl	800120c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80012a2:	2301      	movs	r3, #1
  return HAL_OK;
 80012a4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80012a6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80012aa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80012ae:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80012b2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80012b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80012ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80012be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80012c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80012c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80012ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80012ce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80012d0:	2001      	movs	r0, #1
}
 80012d2:	bd10      	pop	{r4, pc}

080012d4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012d4:	6a03      	ldr	r3, [r0, #32]
{
 80012d6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012d8:	f023 0310 	bic.w	r3, r3, #16
 80012dc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80012de:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80012e0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80012e2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80012e4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80012e6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80012ea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80012ee:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80012f0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80012f4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80012f8:	4d0b      	ldr	r5, [pc, #44]	; (8001328 <TIM_OC2_SetConfig+0x54>)
 80012fa:	42a8      	cmp	r0, r5
 80012fc:	d10d      	bne.n	800131a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80012fe:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001300:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001304:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001308:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800130a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800130c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001310:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001316:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800131a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800131c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800131e:	684a      	ldr	r2, [r1, #4]
 8001320:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001322:	6203      	str	r3, [r0, #32]
 8001324:	bd70      	pop	{r4, r5, r6, pc}
 8001326:	bf00      	nop
 8001328:	40012c00 	.word	0x40012c00

0800132c <HAL_TIM_PWM_ConfigChannel>:
{
 800132c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800132e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001332:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001334:	2b01      	cmp	r3, #1
 8001336:	d054      	beq.n	80013e2 <HAL_TIM_PWM_ConfigChannel+0xb6>
 8001338:	2301      	movs	r3, #1
 800133a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800133e:	2a0c      	cmp	r2, #12
 8001340:	d818      	bhi.n	8001374 <HAL_TIM_PWM_ConfigChannel+0x48>
 8001342:	e8df f002 	tbb	[pc, r2]
 8001346:	1707      	.short	0x1707
 8001348:	171b1717 	.word	0x171b1717
 800134c:	172c1717 	.word	0x172c1717
 8001350:	1717      	.short	0x1717
 8001352:	3d          	.byte	0x3d
 8001353:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001354:	6800      	ldr	r0, [r0, #0]
 8001356:	f7ff fee5 	bl	8001124 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800135a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800135c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800135e:	699a      	ldr	r2, [r3, #24]
 8001360:	f042 0208 	orr.w	r2, r2, #8
 8001364:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001366:	699a      	ldr	r2, [r3, #24]
 8001368:	f022 0204 	bic.w	r2, r2, #4
 800136c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800136e:	699a      	ldr	r2, [r3, #24]
 8001370:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001372:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8001374:	2000      	movs	r0, #0
 8001376:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800137a:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800137c:	6800      	ldr	r0, [r0, #0]
 800137e:	f7ff ffa9 	bl	80012d4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001382:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001384:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001386:	699a      	ldr	r2, [r3, #24]
 8001388:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800138c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800138e:	699a      	ldr	r2, [r3, #24]
 8001390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001394:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001396:	699a      	ldr	r2, [r3, #24]
 8001398:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800139c:	e7e9      	b.n	8001372 <HAL_TIM_PWM_ConfigChannel+0x46>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800139e:	6800      	ldr	r0, [r0, #0]
 80013a0:	f7ff fee8 	bl	8001174 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80013a4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80013a6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80013a8:	69da      	ldr	r2, [r3, #28]
 80013aa:	f042 0208 	orr.w	r2, r2, #8
 80013ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80013b0:	69da      	ldr	r2, [r3, #28]
 80013b2:	f022 0204 	bic.w	r2, r2, #4
 80013b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80013b8:	69da      	ldr	r2, [r3, #28]
 80013ba:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80013bc:	61da      	str	r2, [r3, #28]
      break;
 80013be:	e7d9      	b.n	8001374 <HAL_TIM_PWM_ConfigChannel+0x48>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80013c0:	6800      	ldr	r0, [r0, #0]
 80013c2:	f7ff ff01 	bl	80011c8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80013c6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80013c8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80013ca:	69da      	ldr	r2, [r3, #28]
 80013cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80013d2:	69da      	ldr	r2, [r3, #28]
 80013d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80013da:	69da      	ldr	r2, [r3, #28]
 80013dc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80013e0:	e7ec      	b.n	80013bc <HAL_TIM_PWM_ConfigChannel+0x90>
  __HAL_LOCK(htim);
 80013e2:	2002      	movs	r0, #2
}
 80013e4:	bd38      	pop	{r3, r4, r5, pc}

080013e6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80013e6:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80013e8:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80013ea:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80013ec:	f001 011f 	and.w	r1, r1, #31
 80013f0:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80013f2:	ea23 0304 	bic.w	r3, r3, r4
 80013f6:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80013f8:	6a03      	ldr	r3, [r0, #32]
 80013fa:	408a      	lsls	r2, r1
 80013fc:	431a      	orrs	r2, r3
 80013fe:	6202      	str	r2, [r0, #32]
 8001400:	bd10      	pop	{r4, pc}
	...

08001404 <HAL_TIM_PWM_Start>:
{
 8001404:	b510      	push	{r4, lr}
 8001406:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001408:	b929      	cbnz	r1, 8001416 <HAL_TIM_PWM_Start+0x12>
 800140a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800140e:	2b01      	cmp	r3, #1
 8001410:	d01d      	beq.n	800144e <HAL_TIM_PWM_Start+0x4a>
    return HAL_ERROR;
 8001412:	2001      	movs	r0, #1
 8001414:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001416:	2904      	cmp	r1, #4
 8001418:	d107      	bne.n	800142a <HAL_TIM_PWM_Start+0x26>
 800141a:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800141e:	2b01      	cmp	r3, #1
 8001420:	d1f7      	bne.n	8001412 <HAL_TIM_PWM_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001422:	2302      	movs	r3, #2
 8001424:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8001428:	e014      	b.n	8001454 <HAL_TIM_PWM_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800142a:	2908      	cmp	r1, #8
 800142c:	d107      	bne.n	800143e <HAL_TIM_PWM_Start+0x3a>
 800142e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001432:	2b01      	cmp	r3, #1
 8001434:	d1ed      	bne.n	8001412 <HAL_TIM_PWM_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001436:	2302      	movs	r3, #2
 8001438:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800143c:	e00a      	b.n	8001454 <HAL_TIM_PWM_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800143e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001442:	2b01      	cmp	r3, #1
 8001444:	d1e5      	bne.n	8001412 <HAL_TIM_PWM_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001446:	2302      	movs	r3, #2
 8001448:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800144c:	e002      	b.n	8001454 <HAL_TIM_PWM_Start+0x50>
 800144e:	2302      	movs	r3, #2
 8001450:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001454:	2201      	movs	r2, #1
 8001456:	6820      	ldr	r0, [r4, #0]
 8001458:	f7ff ffc5 	bl	80013e6 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800145c:	6823      	ldr	r3, [r4, #0]
 800145e:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <HAL_TIM_PWM_Start+0x94>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d10a      	bne.n	800147a <HAL_TIM_PWM_Start+0x76>
    __HAL_TIM_MOE_ENABLE(htim);
 8001464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001466:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800146a:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001472:	2a06      	cmp	r2, #6
 8001474:	d10b      	bne.n	800148e <HAL_TIM_PWM_Start+0x8a>
  return HAL_OK;
 8001476:	2000      	movs	r0, #0
 8001478:	bd10      	pop	{r4, pc}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800147a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800147e:	d0f5      	beq.n	800146c <HAL_TIM_PWM_Start+0x68>
 8001480:	4a06      	ldr	r2, [pc, #24]	; (800149c <HAL_TIM_PWM_Start+0x98>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d0f2      	beq.n	800146c <HAL_TIM_PWM_Start+0x68>
 8001486:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800148a:	4293      	cmp	r3, r2
 800148c:	d0ee      	beq.n	800146c <HAL_TIM_PWM_Start+0x68>
    __HAL_TIM_ENABLE(htim);
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	f042 0201 	orr.w	r2, r2, #1
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	e7ee      	b.n	8001476 <HAL_TIM_PWM_Start+0x72>
 8001498:	40012c00 	.word	0x40012c00
 800149c:	40000400 	.word	0x40000400

080014a0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80014a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80014a4:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	f04f 0302 	mov.w	r3, #2
 80014ac:	d025      	beq.n	80014fa <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 80014ae:	2201      	movs	r2, #1

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80014b4:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80014b6:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 80014b8:	685c      	ldr	r4, [r3, #4]
  __HAL_LOCK(htim);
 80014ba:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 &= ~TIM_CR2_MMS;
 80014be:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80014c2:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 80014c4:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80014c6:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014c8:	4c0d      	ldr	r4, [pc, #52]	; (8001500 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 80014ca:	42a3      	cmp	r3, r4
 80014cc:	d00a      	beq.n	80014e4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80014ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d2:	d007      	beq.n	80014e4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80014d4:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80014d8:	42a3      	cmp	r3, r4
 80014da:	d003      	beq.n	80014e4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80014dc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014e0:	42a3      	cmp	r3, r4
 80014e2:	d104      	bne.n	80014ee <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80014e4:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80014e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80014ea:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80014ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80014ee:	2301      	movs	r3, #1
 80014f0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80014f4:	2300      	movs	r3, #0
 80014f6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80014fa:	4618      	mov	r0, r3

  return HAL_OK;
}
 80014fc:	bd30      	pop	{r4, r5, pc}
 80014fe:	bf00      	nop
 8001500:	40012c00 	.word	0x40012c00

08001504 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001504:	b538      	push	{r3, r4, r5, lr}
 8001506:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001508:	6803      	ldr	r3, [r0, #0]
 800150a:	68c1      	ldr	r1, [r0, #12]
 800150c:	691a      	ldr	r2, [r3, #16]
 800150e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001512:	430a      	orrs	r2, r1
 8001514:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001516:	6882      	ldr	r2, [r0, #8]
 8001518:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800151a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800151c:	4302      	orrs	r2, r0
 800151e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001520:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8001524:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001528:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800152a:	430a      	orrs	r2, r1
 800152c:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800152e:	695a      	ldr	r2, [r3, #20]
 8001530:	69a1      	ldr	r1, [r4, #24]
 8001532:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001536:	430a      	orrs	r2, r1
 8001538:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800153a:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <UART_SetConfig+0x70>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d115      	bne.n	800156c <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001540:	f7ff fd68 	bl	8001014 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001544:	2319      	movs	r3, #25
 8001546:	4358      	muls	r0, r3
 8001548:	6863      	ldr	r3, [r4, #4]
 800154a:	2264      	movs	r2, #100	; 0x64
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001552:	fbb0 f1f2 	udiv	r1, r0, r2
 8001556:	fb02 0311 	mls	r3, r2, r1, r0
 800155a:	011b      	lsls	r3, r3, #4
 800155c:	3332      	adds	r3, #50	; 0x32
 800155e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001562:	6825      	ldr	r5, [r4, #0]
 8001564:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001568:	60ab      	str	r3, [r5, #8]
 800156a:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 800156c:	f7ff fd42 	bl	8000ff4 <HAL_RCC_GetPCLK1Freq>
 8001570:	e7e8      	b.n	8001544 <UART_SetConfig+0x40>
 8001572:	bf00      	nop
 8001574:	40013800 	.word	0x40013800

08001578 <HAL_UART_Init>:
{
 8001578:	b510      	push	{r4, lr}
  if (huart == NULL)
 800157a:	4604      	mov	r4, r0
 800157c:	b340      	cbz	r0, 80015d0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800157e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001582:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001586:	b91b      	cbnz	r3, 8001590 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001588:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800158c:	f000 fb66 	bl	8001c5c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001590:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001592:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001594:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001598:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800159a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800159c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015a0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80015a2:	f7ff ffaf 	bl	8001504 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015a6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015a8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015aa:	691a      	ldr	r2, [r3, #16]
 80015ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80015b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015b2:	695a      	ldr	r2, [r3, #20]
 80015b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80015b8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80015ba:	68da      	ldr	r2, [r3, #12]
 80015bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015c0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80015c2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015c4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80015c6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80015ca:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80015ce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80015d0:	2001      	movs	r0, #1
}
 80015d2:	bd10      	pop	{r4, pc}

080015d4 <uint16_t_Read_APPS>:
	//this function reads the apps several time and gets it average to eleminate error in the reading
	//for now we only read one apps and dont check for plauability
	uint16_t apps1_read=0;
	for(int i=0;i<10;i++)
	{
		apps1_read+=val[0];
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <uint16_t_Read_APPS+0x14>)
	}

	return (apps1_read/10);
 80015d6:	8818      	ldrh	r0, [r3, #0]

}
 80015d8:	230a      	movs	r3, #10
	return (apps1_read/10);
 80015da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80015de:	0040      	lsls	r0, r0, #1
 80015e0:	b280      	uxth	r0, r0
}
 80015e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80015e6:	4770      	bx	lr
 80015e8:	200000e8 	.word	0x200000e8

080015ec <EVMS_Init>:


void EVMS_Init()
{
 80015ec:	b508      	push	{r3, lr}

    
   HAL_ADC_Start_DMA(&hadc1,val,3);
 80015ee:	4905      	ldr	r1, [pc, #20]	; (8001604 <EVMS_Init+0x18>)
 80015f0:	2203      	movs	r2, #3
 80015f2:	4805      	ldr	r0, [pc, #20]	; (8001608 <EVMS_Init+0x1c>)
 80015f4:	f7fe fefc 	bl	80003f0 <HAL_ADC_Start_DMA>
	
   HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
}
 80015f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80015fc:	2108      	movs	r1, #8
 80015fe:	4803      	ldr	r0, [pc, #12]	; (800160c <EVMS_Init+0x20>)
 8001600:	f7ff bf00 	b.w	8001404 <HAL_TIM_PWM_Start>
 8001604:	200000e8 	.word	0x200000e8
 8001608:	200000b8 	.word	0x200000b8
 800160c:	20000070 	.word	0x20000070

08001610 <IDLE_Func>:


void IDLE_Func()
{
 8001610:	b510      	push	{r4, lr}

	HAL_GPIO_WritePin(EVMS_RELAY_GPIO_Port,EVMS_RELAY_Pin,1);
 8001612:	2108      	movs	r1, #8
 8001614:	4813      	ldr	r0, [pc, #76]	; (8001664 <IDLE_Func+0x54>)
 8001616:	2201      	movs	r2, #1
 8001618:	f7ff fa6e 	bl	8000af8 <HAL_GPIO_WritePin>
	//if the start button is not pressed then the next state is still idle state
	// this if can be removed and dont think the code functionality will be changed3
	if(! HAL_GPIO_ReadPin(START_BTN_GPIO_Port,START_BTN_Pin))
 800161c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001620:	4811      	ldr	r0, [pc, #68]	; (8001668 <IDLE_Func+0x58>)
 8001622:	f7ff fa63 	bl	8000aec <HAL_GPIO_ReadPin>
 8001626:	b930      	cbnz	r0, 8001636 <IDLE_Func+0x26>
	{
		nextStateM=IDLE;
 8001628:	4b10      	ldr	r3, [pc, #64]	; (800166c <IDLE_Func+0x5c>)
 800162a:	7018      	strb	r0, [r3, #0]
		// wait until the driver releases his hand from the start button
		while(HAL_GPIO_ReadPin(START_BTN_GPIO_Port,START_BTN_Pin));
		HAL_Delay(50); //wait for button debouncing 
		nextStateM=PRECHARGE;
	}
	currStateM=nextStateM;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <IDLE_Func+0x5c>)
 800162e:	781a      	ldrb	r2, [r3, #0]
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <IDLE_Func+0x60>)
 8001632:	701a      	strb	r2, [r3, #0]
 8001634:	bd10      	pop	{r4, pc}
	else if(HAL_GPIO_ReadPin(START_BTN_GPIO_Port,START_BTN_Pin))
 8001636:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800163a:	480b      	ldr	r0, [pc, #44]	; (8001668 <IDLE_Func+0x58>)
 800163c:	f7ff fa56 	bl	8000aec <HAL_GPIO_ReadPin>
 8001640:	2800      	cmp	r0, #0
 8001642:	d0f3      	beq.n	800162c <IDLE_Func+0x1c>
		while(HAL_GPIO_ReadPin(START_BTN_GPIO_Port,START_BTN_Pin));
 8001644:	4c08      	ldr	r4, [pc, #32]	; (8001668 <IDLE_Func+0x58>)
 8001646:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800164a:	4620      	mov	r0, r4
 800164c:	f7ff fa4e 	bl	8000aec <HAL_GPIO_ReadPin>
 8001650:	2800      	cmp	r0, #0
 8001652:	d1f8      	bne.n	8001646 <IDLE_Func+0x36>
		HAL_Delay(50); //wait for button debouncing 
 8001654:	2032      	movs	r0, #50	; 0x32
 8001656:	f7fe fdc1 	bl	80001dc <HAL_Delay>
		nextStateM=PRECHARGE;
 800165a:	2201      	movs	r2, #1
 800165c:	4b03      	ldr	r3, [pc, #12]	; (800166c <IDLE_Func+0x5c>)
 800165e:	701a      	strb	r2, [r3, #0]
 8001660:	e7e4      	b.n	800162c <IDLE_Func+0x1c>
 8001662:	bf00      	nop
 8001664:	40010800 	.word	0x40010800
 8001668:	40010c00 	.word	0x40010c00
 800166c:	20000029 	.word	0x20000029
 8001670:	20000028 	.word	0x20000028

08001674 <PRECHARGE_Func>:

}

void PRECHARGE_Func()
{
 8001674:	b508      	push	{r3, lr}

	// close the precharge relaay of bamocar
	HAL_GPIO_WritePin(PRECHARGE_RELAY_GPIO_Port,PRECHARGE_RELAY_Pin,1);
 8001676:	2201      	movs	r2, #1
 8001678:	2140      	movs	r1, #64	; 0x40
 800167a:	480c      	ldr	r0, [pc, #48]	; (80016ac <PRECHARGE_Func+0x38>)
 800167c:	f7ff fa3c 	bl	8000af8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001680:	2032      	movs	r0, #50	; 0x32
 8001682:	f7fe fdab 	bl	80001dc <HAL_Delay>
	// read the feedback from the percharge relay to see if it is closed or not 
	if(HAL_GPIO_ReadPin(PRE_CHARGE_FB_GPIO_Port,PRE_CHARGE_FB_Pin)== 0)
 8001686:	f44f 7100 	mov.w	r1, #512	; 0x200
 800168a:	4809      	ldr	r0, [pc, #36]	; (80016b0 <PRECHARGE_Func+0x3c>)
 800168c:	f7ff fa2e 	bl	8000aec <HAL_GPIO_ReadPin>
		ErrorAction();
	}


	// if dc90 from bamocar is set high this means that the inverter is precharged and now its time to go to neutral state
	if(HAL_GPIO_ReadPin(DC90_INPUT_GPIO_Port,DC90_INPUT_Pin))
 8001690:	2110      	movs	r1, #16
 8001692:	4806      	ldr	r0, [pc, #24]	; (80016ac <PRECHARGE_Func+0x38>)
 8001694:	f7ff fa2a 	bl	8000aec <HAL_GPIO_ReadPin>
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <PRECHARGE_Func+0x40>)
 800169a:	b128      	cbz	r0, 80016a8 <PRECHARGE_Func+0x34>
	{
				nextStateM=NEUTRAL;
 800169c:	2202      	movs	r2, #2

	}
	//else the inverter is still precharging
	else   
	{
			nextStateM=PRECHARGE;
 800169e:	701a      	strb	r2, [r3, #0]
	}
	currStateM=nextStateM;
 80016a0:	781a      	ldrb	r2, [r3, #0]
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <PRECHARGE_Func+0x44>)
 80016a4:	701a      	strb	r2, [r3, #0]
 80016a6:	bd08      	pop	{r3, pc}
			nextStateM=PRECHARGE;
 80016a8:	2201      	movs	r2, #1
 80016aa:	e7f8      	b.n	800169e <PRECHARGE_Func+0x2a>
 80016ac:	40010c00 	.word	0x40010c00
 80016b0:	40010800 	.word	0x40010800
 80016b4:	20000029 	.word	0x20000029
 80016b8:	20000028 	.word	0x20000028

080016bc <NEUTRAL_Func>:

}


void NEUTRAL_Func()
{
 80016bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//open the precharge relay the inverter is charged now
	HAL_GPIO_WritePin(PRECHARGE_RELAY_GPIO_Port,PRECHARGE_RELAY_Pin,0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2140      	movs	r1, #64	; 0x40
 80016c2:	4839      	ldr	r0, [pc, #228]	; (80017a8 <NEUTRAL_Func+0xec>)
 80016c4:	f7ff fa18 	bl	8000af8 <HAL_GPIO_WritePin>

	//close the AIR+ve relay
	HAL_GPIO_WritePin(AIR_POSITIVE_GPIO_Port,AIR_POSITIVE_Pin,1);
 80016c8:	2201      	movs	r2, #1
 80016ca:	2180      	movs	r1, #128	; 0x80
 80016cc:	4836      	ldr	r0, [pc, #216]	; (80017a8 <NEUTRAL_Func+0xec>)
 80016ce:	f7ff fa13 	bl	8000af8 <HAL_GPIO_WritePin>

	HAL_Delay(50); //just a delay to make sure that the relays had time to act
 80016d2:	2032      	movs	r0, #50	; 0x32
 80016d4:	f7fe fd82 	bl	80001dc <HAL_Delay>

	if(HAL_GPIO_ReadPin(PRE_CHARGE_FB_GPIO_Port,PRE_CHARGE_FB_Pin)== 1)
 80016d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016dc:	4833      	ldr	r0, [pc, #204]	; (80017ac <NEUTRAL_Func+0xf0>)
 80016de:	f7ff fa05 	bl	8000aec <HAL_GPIO_ReadPin>
	{
		// if the precharge relay is not opened then the relay  or its connection has a problem so call ERROR function
		ErrorAction();
	}

	if(HAL_GPIO_ReadPin(AIR_POSITIVE_FB_GPIO_Port,AIR_NEGATIVE_FB_Pin)==0)
 80016e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e6:	4831      	ldr	r0, [pc, #196]	; (80017ac <NEUTRAL_Func+0xf0>)
 80016e8:	f7ff fa00 	bl	8000aec <HAL_GPIO_ReadPin>
	{
		//if the AIR+ve relay is not closed then there is a a problem in the relay or its connection
		ErrorAction();
	}

	if(HAL_GPIO_ReadPin(START_BTN_GPIO_Port,START_BTN_Pin))
 80016ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016f0:	482d      	ldr	r0, [pc, #180]	; (80017a8 <NEUTRAL_Func+0xec>)
 80016f2:	f7ff f9fb 	bl	8000aec <HAL_GPIO_ReadPin>
 80016f6:	b170      	cbz	r0, 8001716 <NEUTRAL_Func+0x5a>
	{
		// IF THE START BUTTON IS PRESSED GO TO DISCHARGE STATE
		while(HAL_GPIO_ReadPin(START_BTN_GPIO_Port,START_BTN_Pin)); //wait until the driver release the button
 80016f8:	4c2b      	ldr	r4, [pc, #172]	; (80017a8 <NEUTRAL_Func+0xec>)
 80016fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016fe:	4620      	mov	r0, r4
 8001700:	f7ff f9f4 	bl	8000aec <HAL_GPIO_ReadPin>
 8001704:	2800      	cmp	r0, #0
 8001706:	d1f8      	bne.n	80016fa <NEUTRAL_Func+0x3e>
		HAL_Delay(50); //delay for button debouncing
 8001708:	2032      	movs	r0, #50	; 0x32
 800170a:	f7fe fd67 	bl	80001dc <HAL_Delay>
		nextStateM=DISCHARGE;
 800170e:	2204      	movs	r2, #4
			nextStateM=DRIVE;
		}
	}
	else
	{
		nextStateM=NEUTRAL;
 8001710:	4b27      	ldr	r3, [pc, #156]	; (80017b0 <NEUTRAL_Func+0xf4>)
 8001712:	701a      	strb	r2, [r3, #0]
 8001714:	e021      	b.n	800175a <NEUTRAL_Func+0x9e>
	else if(HAL_GPIO_ReadPin(RTD_BTN_GPIO_Port,RTD_BTN_Pin) && val[2]>VAL_BRAKE_ANGLE_RTD)
 8001716:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800171a:	4823      	ldr	r0, [pc, #140]	; (80017a8 <NEUTRAL_Func+0xec>)
 800171c:	f7ff f9e6 	bl	8000aec <HAL_GPIO_ReadPin>
 8001720:	b320      	cbz	r0, 800176c <NEUTRAL_Func+0xb0>
 8001722:	f640 52ac 	movw	r2, #3500	; 0xdac
 8001726:	4c23      	ldr	r4, [pc, #140]	; (80017b4 <NEUTRAL_Func+0xf8>)
 8001728:	88a1      	ldrh	r1, [r4, #4]
 800172a:	4291      	cmp	r1, r2
 800172c:	d91e      	bls.n	800176c <NEUTRAL_Func+0xb0>
		uint32_t time_on_press=HAL_GetTick(); //store the value when the key is pressed
 800172e:	f7fe fd4f 	bl	80001d0 <HAL_GetTick>
 8001732:	4605      	mov	r5, r0
		uint32_t time_difference=HAL_GetTick()-time_on_press;  //difference between when key is pressed ad current time
 8001734:	f7fe fd4c 	bl	80001d0 <HAL_GetTick>
		while( (time_difference<3000) && (HAL_GPIO_ReadPin(RTD_BTN_GPIO_Port,RTD_BTN_Pin)) &&  (val[2]>VAL_BRAKE_ANGLE_RTD) )
 8001738:	f640 36b7 	movw	r6, #2999	; 0xbb7
 800173c:	4f1a      	ldr	r7, [pc, #104]	; (80017a8 <NEUTRAL_Func+0xec>)
		uint32_t time_difference=HAL_GetTick()-time_on_press;  //difference between when key is pressed ad current time
 800173e:	1b40      	subs	r0, r0, r5
		while( (time_difference<3000) && (HAL_GPIO_ReadPin(RTD_BTN_GPIO_Port,RTD_BTN_Pin)) &&  (val[2]>VAL_BRAKE_ANGLE_RTD) )
 8001740:	42b0      	cmp	r0, r6
 8001742:	d815      	bhi.n	8001770 <NEUTRAL_Func+0xb4>
 8001744:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001748:	4638      	mov	r0, r7
 800174a:	f7ff f9cf 	bl	8000aec <HAL_GPIO_ReadPin>
 800174e:	b120      	cbz	r0, 800175a <NEUTRAL_Func+0x9e>
 8001750:	f640 53ac 	movw	r3, #3500	; 0xdac
 8001754:	88a2      	ldrh	r2, [r4, #4]
 8001756:	429a      	cmp	r2, r3
 8001758:	d804      	bhi.n	8001764 <NEUTRAL_Func+0xa8>
	}

	currStateM=nextStateM;
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <NEUTRAL_Func+0xf4>)
 800175c:	781a      	ldrb	r2, [r3, #0]
 800175e:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <NEUTRAL_Func+0xfc>)
 8001760:	701a      	strb	r2, [r3, #0]
}
 8001762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_difference=HAL_GetTick()-time_on_press;
 8001764:	f7fe fd34 	bl	80001d0 <HAL_GetTick>
 8001768:	1b40      	subs	r0, r0, r5
 800176a:	e7e9      	b.n	8001740 <NEUTRAL_Func+0x84>
		nextStateM=NEUTRAL;
 800176c:	2202      	movs	r2, #2
 800176e:	e7cf      	b.n	8001710 <NEUTRAL_Func+0x54>
			HAL_GPIO_WritePin(RTDS_GPIO_Port,RTDS_Pin,1);
 8001770:	2201      	movs	r2, #1
 8001772:	2104      	movs	r1, #4
 8001774:	480d      	ldr	r0, [pc, #52]	; (80017ac <NEUTRAL_Func+0xf0>)
 8001776:	f7ff f9bf 	bl	8000af8 <HAL_GPIO_WritePin>
			HAL_Delay(3000);
 800177a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800177e:	f7fe fd2d 	bl	80001dc <HAL_Delay>
			HAL_GPIO_WritePin(RTDS_GPIO_Port,RTDS_Pin,0);
 8001782:	2200      	movs	r2, #0
 8001784:	2104      	movs	r1, #4
 8001786:	4809      	ldr	r0, [pc, #36]	; (80017ac <NEUTRAL_Func+0xf0>)
 8001788:	f7ff f9b6 	bl	8000af8 <HAL_GPIO_WritePin>
			while(HAL_GPIO_ReadPin(RTD_BTN_GPIO_Port,RTD_BTN_Pin));
 800178c:	4c06      	ldr	r4, [pc, #24]	; (80017a8 <NEUTRAL_Func+0xec>)
 800178e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001792:	4620      	mov	r0, r4
 8001794:	f7ff f9aa 	bl	8000aec <HAL_GPIO_ReadPin>
 8001798:	2800      	cmp	r0, #0
 800179a:	d1f8      	bne.n	800178e <NEUTRAL_Func+0xd2>
			HAL_Delay(50); //small delay for button debouncing
 800179c:	2032      	movs	r0, #50	; 0x32
 800179e:	f7fe fd1d 	bl	80001dc <HAL_Delay>
			nextStateM=DRIVE;
 80017a2:	2203      	movs	r2, #3
 80017a4:	e7b4      	b.n	8001710 <NEUTRAL_Func+0x54>
 80017a6:	bf00      	nop
 80017a8:	40010c00 	.word	0x40010c00
 80017ac:	40010800 	.word	0x40010800
 80017b0:	20000029 	.word	0x20000029
 80017b4:	200000e8 	.word	0x200000e8
 80017b8:	20000028 	.word	0x20000028

080017bc <DRIVE_Func>:



void DRIVE_Func()
{
 80017bc:	b513      	push	{r0, r1, r4, lr}

	//The motor inverter enables
	HAL_GPIO_WritePin(RFE_ENABLE_GPIO_Port,RFE_ENABLE_Pin,1);
 80017be:	2201      	movs	r2, #1
 80017c0:	2140      	movs	r1, #64	; 0x40
 80017c2:	4818      	ldr	r0, [pc, #96]	; (8001824 <DRIVE_Func+0x68>)
 80017c4:	f7ff f998 	bl	8000af8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port,DRIVE_ENABLE_Pin,1);
 80017c8:	2201      	movs	r2, #1
 80017ca:	2180      	movs	r1, #128	; 0x80
 80017cc:	4815      	ldr	r0, [pc, #84]	; (8001824 <DRIVE_Func+0x68>)
 80017ce:	f7ff f993 	bl	8000af8 <HAL_GPIO_WritePin>

	//read the value of APPS
	uint16_t APPS_READ=uint16_t_Read_APPS();
 80017d2:	f7ff feff 	bl	80015d4 <uint16_t_Read_APPS>

	//MAPS THA ADC READ TO PWM OUTPUT VALUE
	APPS_READ=map(APPS_READ,0,4095,0,PWM_MAX_OUTPUT);
 80017d6:	23c7      	movs	r3, #199	; 0xc7
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2300      	movs	r3, #0
 80017dc:	f640 72ff 	movw	r2, #4095	; 0xfff
 80017e0:	4619      	mov	r1, r3
 80017e2:	f000 fa88 	bl	8001cf6 <map>
	//OUTPUTS THE TORQUE COMMAND AS PWM
	htim3.Instance->CCR3=APPS_READ;
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <DRIVE_Func+0x6c>)


	if(HAL_GPIO_ReadPin(START_BTN_GPIO_Port,START_BTN_Pin))
 80017e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	htim3.Instance->CCR3=APPS_READ;
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	63d8      	str	r0, [r3, #60]	; 0x3c
	if(HAL_GPIO_ReadPin(START_BTN_GPIO_Port,START_BTN_Pin))
 80017f0:	480e      	ldr	r0, [pc, #56]	; (800182c <DRIVE_Func+0x70>)
 80017f2:	f7ff f97b 	bl	8000aec <HAL_GPIO_ReadPin>
 80017f6:	b198      	cbz	r0, 8001820 <DRIVE_Func+0x64>
	{
		// IF THE START BUTTON IS PRESSED GO TO DISCHARGE STATE
		while(HAL_GPIO_ReadPin(START_BTN_GPIO_Port,START_BTN_Pin)); //wait until the driver release the button
 80017f8:	4c0c      	ldr	r4, [pc, #48]	; (800182c <DRIVE_Func+0x70>)
 80017fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017fe:	4620      	mov	r0, r4
 8001800:	f7ff f974 	bl	8000aec <HAL_GPIO_ReadPin>
 8001804:	2800      	cmp	r0, #0
 8001806:	d1f8      	bne.n	80017fa <DRIVE_Func+0x3e>
		HAL_Delay(50); //delay for button debouncing
 8001808:	2032      	movs	r0, #50	; 0x32
 800180a:	f7fe fce7 	bl	80001dc <HAL_Delay>
		nextStateM=DISCHARGE;
 800180e:	2204      	movs	r2, #4

	}

	else
	{
		nextStateM=DRIVE;
 8001810:	4b07      	ldr	r3, [pc, #28]	; (8001830 <DRIVE_Func+0x74>)
 8001812:	701a      	strb	r2, [r3, #0]
	}
	currStateM=nextStateM;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <DRIVE_Func+0x74>)
 8001816:	781a      	ldrb	r2, [r3, #0]
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <DRIVE_Func+0x78>)
 800181a:	701a      	strb	r2, [r3, #0]


}
 800181c:	b002      	add	sp, #8
 800181e:	bd10      	pop	{r4, pc}
		nextStateM=DRIVE;
 8001820:	2203      	movs	r2, #3
 8001822:	e7f5      	b.n	8001810 <DRIVE_Func+0x54>
 8001824:	40010800 	.word	0x40010800
 8001828:	20000070 	.word	0x20000070
 800182c:	40010c00 	.word	0x40010c00
 8001830:	20000029 	.word	0x20000029
 8001834:	20000028 	.word	0x20000028

08001838 <DISCHARGE_Func>:


void DISCHARGE_Func()
{
 8001838:	b508      	push	{r3, lr}

	
	HAL_GPIO_WritePin(EVMS_RELAY_GPIO_Port,EVMS_RELAY_Pin,0);
 800183a:	2200      	movs	r2, #0
 800183c:	2108      	movs	r1, #8
 800183e:	4812      	ldr	r0, [pc, #72]	; (8001888 <DISCHARGE_Func+0x50>)
 8001840:	f7ff f95a 	bl	8000af8 <HAL_GPIO_WritePin>

	//disable the inverter
	HAL_GPIO_WritePin(RFE_ENABLE_GPIO_Port,RFE_ENABLE_Pin,0);
 8001844:	2200      	movs	r2, #0
 8001846:	2140      	movs	r1, #64	; 0x40
 8001848:	480f      	ldr	r0, [pc, #60]	; (8001888 <DISCHARGE_Func+0x50>)
 800184a:	f7ff f955 	bl	8000af8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port,DRIVE_ENABLE_Pin,0);
 800184e:	2200      	movs	r2, #0
 8001850:	2180      	movs	r1, #128	; 0x80
 8001852:	480d      	ldr	r0, [pc, #52]	; (8001888 <DISCHARGE_Func+0x50>)
 8001854:	f7ff f950 	bl	8000af8 <HAL_GPIO_WritePin>


	//open the AIR+ve relay
	HAL_GPIO_WritePin(AIR_POSITIVE_GPIO_Port,AIR_POSITIVE_Pin,0);
 8001858:	2200      	movs	r2, #0
 800185a:	2180      	movs	r1, #128	; 0x80
 800185c:	480b      	ldr	r0, [pc, #44]	; (800188c <DISCHARGE_Func+0x54>)
 800185e:	f7ff f94b 	bl	8000af8 <HAL_GPIO_WritePin>
if(HAL_GPIO_ReadPin(AIR_POSITIVE_FB_GPIO_Port,AIR_NEGATIVE_FB_Pin)==1)
 8001862:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001866:	4808      	ldr	r0, [pc, #32]	; (8001888 <DISCHARGE_Func+0x50>)
 8001868:	f7ff f940 	bl	8000aec <HAL_GPIO_ReadPin>
		//if the AIR+ve relay is not opened then there is a a problem in the relay or its connection
		ErrorAction();
	}


	if(HAL_GPIO_ReadPin(DC60_INPUT_GPIO_Port,DC60_INPUT_Pin)==1)
 800186c:	2108      	movs	r1, #8
 800186e:	4807      	ldr	r0, [pc, #28]	; (800188c <DISCHARGE_Func+0x54>)
 8001870:	f7ff f93c 	bl	8000aec <HAL_GPIO_ReadPin>
 8001874:	2801      	cmp	r0, #1
	{
		nextStateM=IDLE;
 8001876:	bf0c      	ite	eq
 8001878:	2200      	moveq	r2, #0
	}
	else
	{
		nextStateM=DISCHARGE;
 800187a:	2204      	movne	r2, #4
 800187c:	4b04      	ldr	r3, [pc, #16]	; (8001890 <DISCHARGE_Func+0x58>)
 800187e:	701a      	strb	r2, [r3, #0]
	}
	currStateM=nextStateM;
 8001880:	781a      	ldrb	r2, [r3, #0]
 8001882:	4b04      	ldr	r3, [pc, #16]	; (8001894 <DISCHARGE_Func+0x5c>)
 8001884:	701a      	strb	r2, [r3, #0]
 8001886:	bd08      	pop	{r3, pc}
 8001888:	40010800 	.word	0x40010800
 800188c:	40010c00 	.word	0x40010c00
 8001890:	20000029 	.word	0x20000029
 8001894:	20000028 	.word	0x20000028

08001898 <loop>:



void loop()
{
	switch(currStateM)
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <loop+0x28>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b04      	cmp	r3, #4
 800189e:	d80e      	bhi.n	80018be <loop+0x26>
 80018a0:	e8df f003 	tbb	[pc, r3]
 80018a4:	09070503 	.word	0x09070503
 80018a8:	0b          	.byte	0x0b
 80018a9:	00          	.byte	0x00
	{
		case IDLE:
			IDLE_Func();
 80018aa:	f7ff beb1 	b.w	8001610 <IDLE_Func>
			break;

		case PRECHARGE:
			PRECHARGE_Func();
 80018ae:	f7ff bee1 	b.w	8001674 <PRECHARGE_Func>
			break;

		case NEUTRAL:
			NEUTRAL_Func();
 80018b2:	f7ff bf03 	b.w	80016bc <NEUTRAL_Func>
			break;

		case DRIVE:
			DRIVE_Func();
 80018b6:	f7ff bf81 	b.w	80017bc <DRIVE_Func>
			break;

		case DISCHARGE:
			DISCHARGE_Func();
 80018ba:	f7ff bfbd 	b.w	8001838 <DISCHARGE_Func>
 80018be:	4770      	bx	lr
 80018c0:	20000028 	.word	0x20000028

080018c4 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018c4:	2228      	movs	r2, #40	; 0x28
{
 80018c6:	b510      	push	{r4, lr}
 80018c8:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ca:	eb0d 0002 	add.w	r0, sp, r2
 80018ce:	2100      	movs	r1, #0
 80018d0:	f000 fa68 	bl	8001da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018d4:	2214      	movs	r2, #20
 80018d6:	2100      	movs	r1, #0
 80018d8:	eb0d 0002 	add.w	r0, sp, r2
 80018dc:	f000 fa62 	bl	8001da4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e0:	2100      	movs	r1, #0
 80018e2:	2210      	movs	r2, #16
 80018e4:	a801      	add	r0, sp, #4
 80018e6:	f000 fa5d 	bl	8001da4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ee:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018f0:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018f2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018f4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018fa:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018fc:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018fe:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001900:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001902:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001904:	f7ff f8fe 	bl	8000b04 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001908:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800190a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800190e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001910:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001912:	4621      	mov	r1, r4
 8001914:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001916:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001918:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800191a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800191c:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800191e:	f7ff facb 	bl	8000eb8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001922:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001926:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001928:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800192a:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800192c:	f7ff fb82 	bl	8001034 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001930:	b014      	add	sp, #80	; 0x50
 8001932:	bd10      	pop	{r4, pc}

08001934 <main>:
{
 8001934:	b580      	push	{r7, lr}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001936:	4d6b      	ldr	r5, [pc, #428]	; (8001ae4 <main+0x1b0>)
{
 8001938:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 800193a:	f7fe fc2b 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 800193e:	f7ff ffc1 	bl	80018c4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001942:	2210      	movs	r2, #16
 8001944:	2100      	movs	r1, #0
 8001946:	a807      	add	r0, sp, #28
 8001948:	f000 fa2c 	bl	8001da4 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800194c:	69ab      	ldr	r3, [r5, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RTDS_Pin|EVMS_RELAY_Pin|PUMP_Pin|RFE_ENABLE_Pin 
 800194e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001950:	f043 0310 	orr.w	r3, r3, #16
 8001954:	61ab      	str	r3, [r5, #24]
 8001956:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, RTDS_Pin|EVMS_RELAY_Pin|PUMP_Pin|RFE_ENABLE_Pin 
 8001958:	21dc      	movs	r1, #220	; 0xdc
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800195a:	f003 0310 	and.w	r3, r3, #16
 800195e:	9301      	str	r3, [sp, #4]
 8001960:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001962:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, RTDS_Pin|EVMS_RELAY_Pin|PUMP_Pin|RFE_ENABLE_Pin 
 8001964:	4860      	ldr	r0, [pc, #384]	; (8001ae8 <main+0x1b4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001966:	f043 0320 	orr.w	r3, r3, #32
 800196a:	61ab      	str	r3, [r5, #24]
 800196c:	69ab      	ldr	r3, [r5, #24]
  /*Configure GPIO pins : RTDS_Pin EVMS_RELAY_Pin PUMP_Pin RFE_ENABLE_Pin 
                           DRIVE_ENABLE_Pin */
  GPIO_InitStruct.Pin = RTDS_Pin|EVMS_RELAY_Pin|PUMP_Pin|RFE_ENABLE_Pin 
                          |DRIVE_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001970:	f003 0320 	and.w	r3, r3, #32
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197a:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800197c:	f043 0304 	orr.w	r3, r3, #4
 8001980:	61ab      	str	r3, [r5, #24]
 8001982:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	9303      	str	r3, [sp, #12]
 800198e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001990:	69ab      	ldr	r3, [r5, #24]
  hadc1.Init.NbrOfConversion = 3;
 8001992:	2703      	movs	r7, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001994:	f043 0308 	orr.w	r3, r3, #8
 8001998:	61ab      	str	r3, [r5, #24]
 800199a:	69ab      	ldr	r3, [r5, #24]
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	9304      	str	r3, [sp, #16]
 80019a2:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, RTDS_Pin|EVMS_RELAY_Pin|PUMP_Pin|RFE_ENABLE_Pin 
 80019a4:	f7ff f8a8 	bl	8000af8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, PRECHARGE_RELAY_Pin|AIR_POSITIVE_Pin, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	21c0      	movs	r1, #192	; 0xc0
 80019ac:	484f      	ldr	r0, [pc, #316]	; (8001aec <main+0x1b8>)
 80019ae:	f7ff f8a3 	bl	8000af8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = RTDS_Pin|EVMS_RELAY_Pin|PUMP_Pin|RFE_ENABLE_Pin 
 80019b2:	23dc      	movs	r3, #220	; 0xdc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b4:	a907      	add	r1, sp, #28
 80019b6:	484c      	ldr	r0, [pc, #304]	; (8001ae8 <main+0x1b4>)
  GPIO_InitStruct.Pin = RTDS_Pin|EVMS_RELAY_Pin|PUMP_Pin|RFE_ENABLE_Pin 
 80019b8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ba:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c2:	f7fe ffb1 	bl	8000928 <HAL_GPIO_Init>

  /*Configure GPIO pins : START_BTN_Pin RTD_BTN_Pin ENDURANCE_BTN_Pin ACCELERATION_BTN_Pin 
                           DC60_INPUT_Pin DC90_INPUT_Pin BAMOCAR_ERR_Pin */
  GPIO_InitStruct.Pin = START_BTN_Pin|RTD_BTN_Pin|ENDURANCE_BTN_Pin|ACCELERATION_BTN_Pin 
 80019c6:	f24f 0338 	movw	r3, #61496	; 0xf038
                          |DC60_INPUT_Pin|DC90_INPUT_Pin|BAMOCAR_ERR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ca:	a907      	add	r1, sp, #28
 80019cc:	4847      	ldr	r0, [pc, #284]	; (8001aec <main+0x1b8>)
  GPIO_InitStruct.Pin = START_BTN_Pin|RTD_BTN_Pin|ENDURANCE_BTN_Pin|ACCELERATION_BTN_Pin 
 80019ce:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d0:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d4:	f7fe ffa8 	bl	8000928 <HAL_GPIO_Init>

  /*Configure GPIO pins : SKIDPAD_BTN_Pin PRE_CHARGE_FB_Pin AIR_POSITIVE_FB_Pin AIR_NEGATIVE_FB_Pin */
  GPIO_InitStruct.Pin = SKIDPAD_BTN_Pin|PRE_CHARGE_FB_Pin|AIR_POSITIVE_FB_Pin|AIR_NEGATIVE_FB_Pin;
 80019d8:	f44f 4307 	mov.w	r3, #34560	; 0x8700
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019dc:	a907      	add	r1, sp, #28
 80019de:	4842      	ldr	r0, [pc, #264]	; (8001ae8 <main+0x1b4>)
  GPIO_InitStruct.Pin = SKIDPAD_BTN_Pin|PRE_CHARGE_FB_Pin|AIR_POSITIVE_FB_Pin|AIR_NEGATIVE_FB_Pin;
 80019e0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e2:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e6:	f7fe ff9f 	bl	8000928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PRECHARGE_RELAY_Pin AIR_POSITIVE_Pin */
  GPIO_InitStruct.Pin = PRECHARGE_RELAY_Pin|AIR_POSITIVE_Pin;
 80019ea:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ec:	a907      	add	r1, sp, #28
 80019ee:	483f      	ldr	r0, [pc, #252]	; (8001aec <main+0x1b8>)
  GPIO_InitStruct.Pin = PRECHARGE_RELAY_Pin|AIR_POSITIVE_Pin;
 80019f0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f2:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fa:	f7fe ff95 	bl	8000928 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 7, 7);
 80019fe:	2207      	movs	r2, #7
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a00:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 7, 7);
 8001a02:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a04:	4333      	orrs	r3, r6
 8001a06:	616b      	str	r3, [r5, #20]
 8001a08:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 7, 7);
 8001a0a:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a0c:	4033      	ands	r3, r6
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 7, 7);
 8001a12:	f7fe fe2f 	bl	8000674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a16:	200b      	movs	r0, #11
 8001a18:	f7fe fe60 	bl	80006dc <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8001a1c:	4d34      	ldr	r5, [pc, #208]	; (8001af0 <main+0x1bc>)
 8001a1e:	4b35      	ldr	r3, [pc, #212]	; (8001af4 <main+0x1c0>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a20:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 8001a22:	602b      	str	r3, [r5, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a28:	60ab      	str	r3, [r5, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a2a:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a2e:	732e      	strb	r6, [r5, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a30:	61eb      	str	r3, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a32:	752c      	strb	r4, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a34:	606c      	str	r4, [r5, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001a36:	612f      	str	r7, [r5, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a38:	9407      	str	r4, [sp, #28]
 8001a3a:	9408      	str	r4, [sp, #32]
 8001a3c:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a3e:	f7fe fd87 	bl	8000550 <HAL_ADC_Init>
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001a42:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a44:	a907      	add	r1, sp, #28
 8001a46:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001a48:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.Channel = ADC_CHANNEL_0;
 8001a4a:	9407      	str	r4, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a4c:	9608      	str	r6, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a4e:	f7fe fc13 	bl	8000278 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a52:	a907      	add	r1, sp, #28
 8001a54:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8001a56:	9607      	str	r6, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001a58:	f8cd 8020 	str.w	r8, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a5c:	f7fe fc0c 	bl	8000278 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_5;
 8001a60:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a62:	a907      	add	r1, sp, #28
 8001a64:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_5;
 8001a66:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001a68:	9708      	str	r7, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a6a:	f7fe fc05 	bl	8000278 <HAL_ADC_ConfigChannel>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a6e:	221c      	movs	r2, #28
 8001a70:	4621      	mov	r1, r4
 8001a72:	eb0d 0002 	add.w	r0, sp, r2
  htim3.Instance = TIM3;
 8001a76:	4d20      	ldr	r5, [pc, #128]	; (8001af8 <main+0x1c4>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a78:	9405      	str	r4, [sp, #20]
 8001a7a:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a7c:	f000 f992 	bl	8001da4 <memset>
  htim3.Instance = TIM3;
 8001a80:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <main+0x1c8>)
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a82:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 4-1;
 8001a84:	e885 0088 	stmia.w	r5, {r3, r7}
  htim3.Init.Period = 200-1;
 8001a88:	23c7      	movs	r3, #199	; 0xc7
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8a:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 200-1;
 8001a8c:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8e:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a90:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a92:	f7ff fbf3 	bl	800127c <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a96:	a905      	add	r1, sp, #20
 8001a98:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9a:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9c:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a9e:	f7ff fcff 	bl	80014a0 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aa2:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001aa4:	2208      	movs	r2, #8
 8001aa6:	a907      	add	r1, sp, #28
 8001aa8:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aaa:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8001aac:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aae:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ab0:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ab2:	f7ff fc3b 	bl	800132c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8001ab6:	4628      	mov	r0, r5
 8001ab8:	f000 f8aa 	bl	8001c10 <HAL_TIM_MspPostInit>
  huart3.Init.BaudRate = 9600;
 8001abc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart3.Instance = USART3;
 8001ac0:	480f      	ldr	r0, [pc, #60]	; (8001b00 <main+0x1cc>)
  huart3.Init.BaudRate = 9600;
 8001ac2:	4a10      	ldr	r2, [pc, #64]	; (8001b04 <main+0x1d0>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac4:	6084      	str	r4, [r0, #8]
  huart3.Init.BaudRate = 9600;
 8001ac6:	e880 000c 	stmia.w	r0, {r2, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001aca:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001acc:	60c4      	str	r4, [r0, #12]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ace:	6143      	str	r3, [r0, #20]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ad0:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad2:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad4:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ad6:	f7ff fd4f 	bl	8001578 <HAL_UART_Init>
  EVMS_Init();
 8001ada:	f7ff fd87 	bl	80015ec <EVMS_Init>
	  loop();
 8001ade:	f7ff fedb 	bl	8001898 <loop>
 8001ae2:	e7fc      	b.n	8001ade <main+0x1aa>
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010800 	.word	0x40010800
 8001aec:	40010c00 	.word	0x40010c00
 8001af0:	200000b8 	.word	0x200000b8
 8001af4:	40012400 	.word	0x40012400
 8001af8:	20000070 	.word	0x20000070
 8001afc:	40000400 	.word	0x40000400
 8001b00:	20000030 	.word	0x20000030
 8001b04:	40004800 	.word	0x40004800

08001b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b08:	4770      	bx	lr
	...

08001b0c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_MspInit+0x3c>)
{
 8001b0e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b10:	699a      	ldr	r2, [r3, #24]
 8001b12:	f042 0201 	orr.w	r2, r2, #1
 8001b16:	619a      	str	r2, [r3, #24]
 8001b18:	699a      	ldr	r2, [r3, #24]
 8001b1a:	f002 0201 	and.w	r2, r2, #1
 8001b1e:	9200      	str	r2, [sp, #0]
 8001b20:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b22:	69da      	ldr	r2, [r3, #28]
 8001b24:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b28:	61da      	str	r2, [r3, #28]
 8001b2a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001b2c:	4a07      	ldr	r2, [pc, #28]	; (8001b4c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b32:	9301      	str	r3, [sp, #4]
 8001b34:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001b36:	6853      	ldr	r3, [r2, #4]
 8001b38:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b42:	b002      	add	sp, #8
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40010000 	.word	0x40010000

08001b50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b50:	b530      	push	{r4, r5, lr}
 8001b52:	4605      	mov	r5, r0
 8001b54:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b56:	2210      	movs	r2, #16
 8001b58:	2100      	movs	r1, #0
 8001b5a:	a802      	add	r0, sp, #8
 8001b5c:	f000 f922 	bl	8001da4 <memset>
  if(hadc->Instance==ADC1)
 8001b60:	682a      	ldr	r2, [r5, #0]
 8001b62:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <HAL_ADC_MspInit+0x88>)
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d134      	bne.n	8001bd2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b68:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001b6c:	699a      	ldr	r2, [r3, #24]
    PA1     ------> ADC1_IN1
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = APPS1_Pin|APPS2_Pin|BRAKES_ANGLE_SENSOR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6e:	481b      	ldr	r0, [pc, #108]	; (8001bdc <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b74:	619a      	str	r2, [r3, #24]
 8001b76:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b78:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b7a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001b7e:	9200      	str	r2, [sp, #0]
 8001b80:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b82:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001b84:	4c16      	ldr	r4, [pc, #88]	; (8001be0 <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	f042 0204 	orr.w	r2, r2, #4
 8001b8a:	619a      	str	r2, [r3, #24]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	9301      	str	r3, [sp, #4]
 8001b94:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = APPS1_Pin|APPS2_Pin|BRAKES_ANGLE_SENSOR_Pin;
 8001b96:	2323      	movs	r3, #35	; 0x23
 8001b98:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9e:	f7fe fec3 	bl	8000928 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ba2:	2280      	movs	r2, #128	; 0x80
 8001ba4:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001baa:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Instance = DMA1_Channel1;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <HAL_ADC_MspInit+0x94>)
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bb2:	6162      	str	r2, [r4, #20]
    hdma_adc1.Instance = DMA1_Channel1;
 8001bb4:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bb6:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bb8:	2300      	movs	r3, #0
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bba:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bbc:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bbe:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bc0:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001bc2:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bc4:	f7fe fdae 	bl	8000724 <HAL_DMA_Init>
 8001bc8:	b108      	cbz	r0, 8001bce <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 8001bca:	f7ff ff9d 	bl	8001b08 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001bce:	622c      	str	r4, [r5, #32]
 8001bd0:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bd2:	b007      	add	sp, #28
 8001bd4:	bd30      	pop	{r4, r5, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40012400 	.word	0x40012400
 8001bdc:	40010800 	.word	0x40010800
 8001be0:	200000f0 	.word	0x200000f0
 8001be4:	40020008 	.word	0x40020008

08001be8 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM3)
 8001be8:	6802      	ldr	r2, [r0, #0]
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_TIM_PWM_MspInit+0x24>)
{
 8001bec:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM3)
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d10a      	bne.n	8001c08 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bf2:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001bf6:	69da      	ldr	r2, [r3, #28]
 8001bf8:	f042 0202 	orr.w	r2, r2, #2
 8001bfc:	61da      	str	r2, [r3, #28]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c08:	b002      	add	sp, #8
 8001c0a:	4770      	bx	lr
 8001c0c:	40000400 	.word	0x40000400

08001c10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c10:	b510      	push	{r4, lr}
 8001c12:	4604      	mov	r4, r0
 8001c14:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c16:	2210      	movs	r2, #16
 8001c18:	2100      	movs	r1, #0
 8001c1a:	a802      	add	r0, sp, #8
 8001c1c:	f000 f8c2 	bl	8001da4 <memset>
  if(htim->Instance==TIM3)
 8001c20:	6822      	ldr	r2, [r4, #0]
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <HAL_TIM_MspPostInit+0x44>)
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d113      	bne.n	8001c50 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c28:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001c2c:	699a      	ldr	r2, [r3, #24]
    PB0     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_OUTPUT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(MOTOR_PWM_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8001c2e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c30:	f042 0208 	orr.w	r2, r2, #8
 8001c34:	619a      	str	r2, [r3, #24]
 8001c36:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(MOTOR_PWM_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8001c38:	4807      	ldr	r0, [pc, #28]	; (8001c58 <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	9301      	str	r3, [sp, #4]
 8001c40:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = MOTOR_PWM_OUTPUT_Pin;
 8001c42:	2301      	movs	r3, #1
 8001c44:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(MOTOR_PWM_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8001c4c:	f7fe fe6c 	bl	8000928 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c50:	b006      	add	sp, #24
 8001c52:	bd10      	pop	{r4, pc}
 8001c54:	40000400 	.word	0x40000400
 8001c58:	40010c00 	.word	0x40010c00

08001c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c5c:	b510      	push	{r4, lr}
 8001c5e:	4604      	mov	r4, r0
 8001c60:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c62:	2210      	movs	r2, #16
 8001c64:	2100      	movs	r1, #0
 8001c66:	a802      	add	r0, sp, #8
 8001c68:	f000 f89c 	bl	8001da4 <memset>
  if(huart->Instance==USART3)
 8001c6c:	6822      	ldr	r2, [r4, #0]
 8001c6e:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <HAL_UART_MspInit+0x70>)
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d128      	bne.n	8001cc6 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c74:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001c78:	69da      	ldr	r2, [r3, #28]
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7a:	a902      	add	r1, sp, #8
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c7c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c80:	61da      	str	r2, [r3, #28]
 8001c82:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c84:	4812      	ldr	r0, [pc, #72]	; (8001cd0 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c86:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001c8a:	9200      	str	r2, [sp, #0]
 8001c8c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8e:	699a      	ldr	r2, [r3, #24]
 8001c90:	f042 0208 	orr.w	r2, r2, #8
 8001c94:	619a      	str	r2, [r3, #24]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ca4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001caa:	2303      	movs	r3, #3
 8001cac:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cae:	f7fe fe3b 	bl	8000928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001cb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cb6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb8:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cba:	a902      	add	r1, sp, #8
 8001cbc:	4804      	ldr	r0, [pc, #16]	; (8001cd0 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cbe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc2:	f7fe fe31 	bl	8000928 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cc6:	b006      	add	sp, #24
 8001cc8:	bd10      	pop	{r4, pc}
 8001cca:	bf00      	nop
 8001ccc:	40004800 	.word	0x40004800
 8001cd0:	40010c00 	.word	0x40010c00

08001cd4 <NMI_Handler>:
 8001cd4:	4770      	bx	lr

08001cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd6:	e7fe      	b.n	8001cd6 <HardFault_Handler>

08001cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd8:	e7fe      	b.n	8001cd8 <MemManage_Handler>

08001cda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cda:	e7fe      	b.n	8001cda <BusFault_Handler>

08001cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cdc:	e7fe      	b.n	8001cdc <UsageFault_Handler>

08001cde <SVC_Handler>:
 8001cde:	4770      	bx	lr

08001ce0 <DebugMon_Handler>:
 8001ce0:	4770      	bx	lr

08001ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce2:	4770      	bx	lr

08001ce4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce4:	f7fe ba68 	b.w	80001b8 <HAL_IncTick>

08001ce8 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ce8:	4801      	ldr	r0, [pc, #4]	; (8001cf0 <DMA1_Channel1_IRQHandler+0x8>)
 8001cea:	f7fe bd89 	b.w	8000800 <HAL_DMA_IRQHandler>
 8001cee:	bf00      	nop
 8001cf0:	200000f0 	.word	0x200000f0

08001cf4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cf4:	4770      	bx	lr

08001cf6 <map>:
#include "utility_funcs.h"


uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) 
{
 8001cf6:	b510      	push	{r4, lr}
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001cf8:	1a44      	subs	r4, r0, r1
 8001cfa:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8001cfe:	1a52      	subs	r2, r2, r1
 8001d00:	1ac0      	subs	r0, r0, r3
 8001d02:	4360      	muls	r0, r4
 8001d04:	fb90 f0f2 	sdiv	r0, r0, r2
 8001d08:	4418      	add	r0, r3
}
 8001d0a:	b280      	uxth	r0, r0
 8001d0c:	bd10      	pop	{r4, pc}
	...

08001d10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d10:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d12:	e003      	b.n	8001d1c <LoopCopyDataInit>

08001d14 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001d16:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d18:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d1a:	3104      	adds	r1, #4

08001d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d1c:	480a      	ldr	r0, [pc, #40]	; (8001d48 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001d20:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d22:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d24:	d3f6      	bcc.n	8001d14 <CopyDataInit>
  ldr r2, =_sbss
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d28:	e002      	b.n	8001d30 <LoopFillZerobss>

08001d2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d2c:	f842 3b04 	str.w	r3, [r2], #4

08001d30 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d32:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d34:	d3f9      	bcc.n	8001d2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d36:	f7ff ffdd 	bl	8001cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d3a:	f000 f80f 	bl	8001d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d3e:	f7ff fdf9 	bl	8001934 <main>
  bx lr
 8001d42:	4770      	bx	lr
  ldr r3, =_sidata
 8001d44:	08001dfc 	.word	0x08001dfc
  ldr r0, =_sdata
 8001d48:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001d50:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001d54:	20000134 	.word	0x20000134

08001d58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d58:	e7fe      	b.n	8001d58 <ADC1_2_IRQHandler>
	...

08001d5c <__libc_init_array>:
 8001d5c:	b570      	push	{r4, r5, r6, lr}
 8001d5e:	2500      	movs	r5, #0
 8001d60:	4e0c      	ldr	r6, [pc, #48]	; (8001d94 <__libc_init_array+0x38>)
 8001d62:	4c0d      	ldr	r4, [pc, #52]	; (8001d98 <__libc_init_array+0x3c>)
 8001d64:	1ba4      	subs	r4, r4, r6
 8001d66:	10a4      	asrs	r4, r4, #2
 8001d68:	42a5      	cmp	r5, r4
 8001d6a:	d109      	bne.n	8001d80 <__libc_init_array+0x24>
 8001d6c:	f000 f822 	bl	8001db4 <_init>
 8001d70:	2500      	movs	r5, #0
 8001d72:	4e0a      	ldr	r6, [pc, #40]	; (8001d9c <__libc_init_array+0x40>)
 8001d74:	4c0a      	ldr	r4, [pc, #40]	; (8001da0 <__libc_init_array+0x44>)
 8001d76:	1ba4      	subs	r4, r4, r6
 8001d78:	10a4      	asrs	r4, r4, #2
 8001d7a:	42a5      	cmp	r5, r4
 8001d7c:	d105      	bne.n	8001d8a <__libc_init_array+0x2e>
 8001d7e:	bd70      	pop	{r4, r5, r6, pc}
 8001d80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d84:	4798      	blx	r3
 8001d86:	3501      	adds	r5, #1
 8001d88:	e7ee      	b.n	8001d68 <__libc_init_array+0xc>
 8001d8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d8e:	4798      	blx	r3
 8001d90:	3501      	adds	r5, #1
 8001d92:	e7f2      	b.n	8001d7a <__libc_init_array+0x1e>
 8001d94:	08001df4 	.word	0x08001df4
 8001d98:	08001df4 	.word	0x08001df4
 8001d9c:	08001df4 	.word	0x08001df4
 8001da0:	08001df8 	.word	0x08001df8

08001da4 <memset>:
 8001da4:	4603      	mov	r3, r0
 8001da6:	4402      	add	r2, r0
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d100      	bne.n	8001dae <memset+0xa>
 8001dac:	4770      	bx	lr
 8001dae:	f803 1b01 	strb.w	r1, [r3], #1
 8001db2:	e7f9      	b.n	8001da8 <memset+0x4>

08001db4 <_init>:
 8001db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001db6:	bf00      	nop
 8001db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dba:	bc08      	pop	{r3}
 8001dbc:	469e      	mov	lr, r3
 8001dbe:	4770      	bx	lr

08001dc0 <_fini>:
 8001dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dc2:	bf00      	nop
 8001dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dc6:	bc08      	pop	{r3}
 8001dc8:	469e      	mov	lr, r3
 8001dca:	4770      	bx	lr
